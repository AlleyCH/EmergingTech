{"id":"node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js","dependencies":[{"name":"C:\\Users\\Owner\\Documents\\EmergingTech\\mnist-acgan_without_node_modules\\mnist-acgan_without_node_modules\\package.json","includedInParent":true,"mtime":1711646217874},{"name":"C:\\Users\\Owner\\Documents\\EmergingTech\\mnist-acgan_without_node_modules\\mnist-acgan_without_node_modules\\.babelrc","includedInParent":true,"mtime":1711646217598},{"name":"C:\\Users\\Owner\\Documents\\EmergingTech\\mnist-acgan_without_node_modules\\mnist-acgan_without_node_modules\\node_modules\\@tensorflow\\tfjs-layers\\package.json","includedInParent":true,"mtime":1711647841702},{"name":"./engine/input_layer","loc":{"line":10,"column":27,"index":310},"parent":"C:\\Users\\Owner\\Documents\\EmergingTech\\mnist-acgan_without_node_modules\\mnist-acgan_without_node_modules\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports_layers.js","resolved":"C:\\Users\\Owner\\Documents\\EmergingTech\\mnist-acgan_without_node_modules\\mnist-acgan_without_node_modules\\node_modules\\@tensorflow\\tfjs-layers\\dist\\engine\\input_layer.js"},{"name":"./engine/topology","loc":{"line":11,"column":22,"index":356},"parent":"C:\\Users\\Owner\\Documents\\EmergingTech\\mnist-acgan_without_node_modules\\mnist-acgan_without_node_modules\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports_layers.js","resolved":"C:\\Users\\Owner\\Documents\\EmergingTech\\mnist-acgan_without_node_modules\\mnist-acgan_without_node_modules\\node_modules\\@tensorflow\\tfjs-layers\\dist\\engine\\topology.js"},{"name":"./exports","loc":{"line":12,"column":22,"index":399},"parent":"C:\\Users\\Owner\\Documents\\EmergingTech\\mnist-acgan_without_node_modules\\mnist-acgan_without_node_modules\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports_layers.js","resolved":"C:\\Users\\Owner\\Documents\\EmergingTech\\mnist-acgan_without_node_modules\\mnist-acgan_without_node_modules\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports.js"},{"name":"./layers/advanced_activations","loc":{"line":13,"column":70,"index":482},"parent":"C:\\Users\\Owner\\Documents\\EmergingTech\\mnist-acgan_without_node_modules\\mnist-acgan_without_node_modules\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports_layers.js","resolved":"C:\\Users\\Owner\\Documents\\EmergingTech\\mnist-acgan_without_node_modules\\mnist-acgan_without_node_modules\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\advanced_activations.js"},{"name":"./layers/convolutional","loc":{"line":14,"column":116,"index":631},"parent":"C:\\Users\\Owner\\Documents\\EmergingTech\\mnist-acgan_without_node_modules\\mnist-acgan_without_node_modules\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports_layers.js","resolved":"C:\\Users\\Owner\\Documents\\EmergingTech\\mnist-acgan_without_node_modules\\mnist-acgan_without_node_modules\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js"},{"name":"./layers/convolutional_depthwise","loc":{"line":15,"column":32,"index":689},"parent":"C:\\Users\\Owner\\Documents\\EmergingTech\\mnist-acgan_without_node_modules\\mnist-acgan_without_node_modules\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports_layers.js","resolved":"C:\\Users\\Owner\\Documents\\EmergingTech\\mnist-acgan_without_node_modules\\mnist-acgan_without_node_modules\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional_depthwise.js"},{"name":"./layers/convolutional_recurrent","loc":{"line":16,"column":43,"index":768},"parent":"C:\\Users\\Owner\\Documents\\EmergingTech\\mnist-acgan_without_node_modules\\mnist-acgan_without_node_modules\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports_layers.js","resolved":"C:\\Users\\Owner\\Documents\\EmergingTech\\mnist-acgan_without_node_modules\\mnist-acgan_without_node_modules\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional_recurrent.js"},{"name":"./layers/core","loc":{"line":17,"column":111,"index":915},"parent":"C:\\Users\\Owner\\Documents\\EmergingTech\\mnist-acgan_without_node_modules\\mnist-acgan_without_node_modules\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports_layers.js","resolved":"C:\\Users\\Owner\\Documents\\EmergingTech\\mnist-acgan_without_node_modules\\mnist-acgan_without_node_modules\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\core.js"},{"name":"./layers/embeddings","loc":{"line":18,"column":26,"index":958},"parent":"C:\\Users\\Owner\\Documents\\EmergingTech\\mnist-acgan_without_node_modules\\mnist-acgan_without_node_modules\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports_layers.js","resolved":"C:\\Users\\Owner\\Documents\\EmergingTech\\mnist-acgan_without_node_modules\\mnist-acgan_without_node_modules\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\embeddings.js"},{"name":"./layers/merge","loc":{"line":19,"column":75,"index":1056},"parent":"C:\\Users\\Owner\\Documents\\EmergingTech\\mnist-acgan_without_node_modules\\mnist-acgan_without_node_modules\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports_layers.js","resolved":"C:\\Users\\Owner\\Documents\\EmergingTech\\mnist-acgan_without_node_modules\\mnist-acgan_without_node_modules\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\merge.js"},{"name":"./layers/noise","loc":{"line":20,"column":61,"index":1135},"parent":"C:\\Users\\Owner\\Documents\\EmergingTech\\mnist-acgan_without_node_modules\\mnist-acgan_without_node_modules\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports_layers.js","resolved":"C:\\Users\\Owner\\Documents\\EmergingTech\\mnist-acgan_without_node_modules\\mnist-acgan_without_node_modules\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\noise.js"},{"name":"./layers/normalization","loc":{"line":21,"column":55,"index":1208},"parent":"C:\\Users\\Owner\\Documents\\EmergingTech\\mnist-acgan_without_node_modules\\mnist-acgan_without_node_modules\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports_layers.js","resolved":"C:\\Users\\Owner\\Documents\\EmergingTech\\mnist-acgan_without_node_modules\\mnist-acgan_without_node_modules\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\normalization.js"},{"name":"./layers/padding","loc":{"line":22,"column":30,"index":1264},"parent":"C:\\Users\\Owner\\Documents\\EmergingTech\\mnist-acgan_without_node_modules\\mnist-acgan_without_node_modules\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports_layers.js","resolved":"C:\\Users\\Owner\\Documents\\EmergingTech\\mnist-acgan_without_node_modules\\mnist-acgan_without_node_modules\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\padding.js"},{"name":"./layers/pooling","loc":{"line":23,"column":199,"index":1483},"parent":"C:\\Users\\Owner\\Documents\\EmergingTech\\mnist-acgan_without_node_modules\\mnist-acgan_without_node_modules\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports_layers.js","resolved":"C:\\Users\\Owner\\Documents\\EmergingTech\\mnist-acgan_without_node_modules\\mnist-acgan_without_node_modules\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\pooling.js"},{"name":"./layers/recurrent","loc":{"line":24,"column":102,"index":1605},"parent":"C:\\Users\\Owner\\Documents\\EmergingTech\\mnist-acgan_without_node_modules\\mnist-acgan_without_node_modules\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports_layers.js","resolved":"C:\\Users\\Owner\\Documents\\EmergingTech\\mnist-acgan_without_node_modules\\mnist-acgan_without_node_modules\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\recurrent.js"},{"name":"./layers/wrappers","loc":{"line":25,"column":47,"index":1674},"parent":"C:\\Users\\Owner\\Documents\\EmergingTech\\mnist-acgan_without_node_modules\\mnist-acgan_without_node_modules\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports_layers.js","resolved":"C:\\Users\\Owner\\Documents\\EmergingTech\\mnist-acgan_without_node_modules\\mnist-acgan_without_node_modules\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\wrappers.js"},{"name":"./layers/preprocessing/image_preprocessing","loc":{"line":26,"column":26,"index":1721},"parent":"C:\\Users\\Owner\\Documents\\EmergingTech\\mnist-acgan_without_node_modules\\mnist-acgan_without_node_modules\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports_layers.js","resolved":"C:\\Users\\Owner\\Documents\\EmergingTech\\mnist-acgan_without_node_modules\\mnist-acgan_without_node_modules\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\preprocessing\\image_preprocessing.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"Layer\", {\n  enumerable: true,\n  get: function () {\n    return _topology.Layer;\n  }\n});\nObject.defineProperty(exports, \"RNN\", {\n  enumerable: true,\n  get: function () {\n    return _recurrent.RNN;\n  }\n});\nObject.defineProperty(exports, \"RNNCell\", {\n  enumerable: true,\n  get: function () {\n    return _recurrent.RNNCell;\n  }\n});\nexports.activation = activation;\nexports.add = add;\nexports.alphaDropout = alphaDropout;\nexports.average = average;\nexports.averagePooling1d = averagePooling1d;\nexports.averagePooling2d = averagePooling2d;\nexports.averagePooling3d = averagePooling3d;\nexports.avgPool1d = avgPool1d;\nexports.avgPool2d = avgPool2d;\nexports.avgPool3d = avgPool3d;\nexports.avgPooling1d = avgPooling1d;\nexports.avgPooling2d = avgPooling2d;\nexports.avgPooling3d = avgPooling3d;\nexports.batchNormalization = batchNormalization;\nexports.bidirectional = bidirectional;\nexports.concatenate = concatenate;\nexports.conv1d = conv1d;\nexports.conv2d = conv2d;\nexports.conv2dTranspose = conv2dTranspose;\nexports.conv3d = conv3d;\nexports.conv3dTranspose = conv3dTranspose;\nexports.convLstm2d = convLstm2d;\nexports.convLstm2dCell = convLstm2dCell;\nexports.cropping2D = cropping2D;\nexports.dense = dense;\nexports.depthwiseConv2d = depthwiseConv2d;\nexports.dot = dot;\nexports.dropout = dropout;\nexports.elu = elu;\nexports.embedding = embedding;\nexports.flatten = flatten;\nexports.gaussianDropout = gaussianDropout;\nexports.gaussianNoise = gaussianNoise;\nexports.globalAveragePooling1d = globalAveragePooling1d;\nexports.globalAveragePooling2d = globalAveragePooling2d;\nexports.globalMaxPool2d = exports.globalMaxPool1d = void 0;\nexports.globalMaxPooling1d = globalMaxPooling1d;\nexports.globalMaxPooling2d = globalMaxPooling2d;\nexports.gru = gru;\nexports.gruCell = gruCell;\nObject.defineProperty(exports, \"input\", {\n  enumerable: true,\n  get: function () {\n    return _exports.input;\n  }\n});\nexports.inputLayer = inputLayer;\nexports.layerNormalization = layerNormalization;\nexports.leakyReLU = leakyReLU;\nexports.lstm = lstm;\nexports.lstmCell = lstmCell;\nexports.masking = masking;\nexports.maxPool2d = exports.maxPool1d = void 0;\nexports.maxPooling1d = maxPooling1d;\nexports.maxPooling2d = maxPooling2d;\nexports.maxPooling3d = maxPooling3d;\nexports.maximum = maximum;\nexports.minimum = minimum;\nexports.multiply = multiply;\nexports.permute = permute;\nexports.prelu = prelu;\nexports.reLU = reLU;\nexports.repeatVector = repeatVector;\nexports.rescaling = rescaling;\nexports.reshape = reshape;\nexports.rnn = rnn;\nexports.separableConv2d = separableConv2d;\nexports.simpleRNN = simpleRNN;\nexports.simpleRNNCell = simpleRNNCell;\nexports.softmax = softmax;\nexports.spatialDropout1d = spatialDropout1d;\nexports.stackedRNNCells = stackedRNNCells;\nexports.thresholdedReLU = thresholdedReLU;\nexports.timeDistributed = timeDistributed;\nexports.upSampling2d = upSampling2d;\nexports.zeroPadding2d = zeroPadding2d;\nvar _input_layer = require(\"./engine/input_layer\");\nvar _topology = require(\"./engine/topology\");\nvar _exports = require(\"./exports\");\nvar _advanced_activations = require(\"./layers/advanced_activations\");\nvar _convolutional = require(\"./layers/convolutional\");\nvar _convolutional_depthwise = require(\"./layers/convolutional_depthwise\");\nvar _convolutional_recurrent = require(\"./layers/convolutional_recurrent\");\nvar _core = require(\"./layers/core\");\nvar _embeddings = require(\"./layers/embeddings\");\nvar _merge = require(\"./layers/merge\");\nvar _noise = require(\"./layers/noise\");\nvar _normalization = require(\"./layers/normalization\");\nvar _padding = require(\"./layers/padding\");\nvar _pooling = require(\"./layers/pooling\");\nvar _recurrent = require(\"./layers/recurrent\");\nvar _wrappers = require(\"./layers/wrappers\");\nvar _image_preprocessing = require(\"./layers/preprocessing/image_preprocessing\");\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n// TODO(cais): Add doc string to all the public static functions in this\n//   class; include exectuable JavaScript code snippets where applicable\n//   (b/74074458).\n// Input Layer.\n/**\n * An input layer is an entry point into a `tf.LayersModel`.\n *\n * `InputLayer` is generated automatically for `tf.Sequential` models by\n * specifying the `inputshape` or `batchInputShape` for the first layer.  It\n * should not be specified explicitly. However, it can be useful sometimes,\n * e.g., when constructing a sequential model from a subset of another\n * sequential model's layers. Like the code snippet below shows.\n *\n * ```js\n * // Define a model which simply adds two inputs.\n * const model1 = tf.sequential();\n * model1.add(tf.layers.dense({inputShape: [4], units: 3, activation: 'relu'}));\n * model1.add(tf.layers.dense({units: 1, activation: 'sigmoid'}));\n * model1.summary();\n * model1.predict(tf.zeros([1, 4])).print();\n *\n * // Construct another model, reusing the second layer of `model1` while\n * // not using the first layer of `model1`. Note that you cannot add the second\n * // layer of `model` directly as the first layer of the new sequential model,\n * // because doing so will lead to an error related to the fact that the layer\n * // is not an input layer. Instead, you need to create an `inputLayer` and add\n * // it to the new sequential model before adding the reused layer.\n * const model2 = tf.sequential();\n * // Use an inputShape that matches the input shape of `model1`'s second\n * // layer.\n * model2.add(tf.layers.inputLayer({inputShape: [3]}));\n * model2.add(model1.layers[1]);\n * model2.summary();\n * model2.predict(tf.zeros([1, 3])).print();\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Inputs', namespace: 'layers'}\n */\nfunction inputLayer(args) {\n  return new _input_layer.InputLayer(args);\n}\n// Advanced Activation Layers.\n/**\n * Exponential Linear Unit (ELU).\n *\n * It follows:\n * `f(x) =  alpha * (exp(x) - 1.) for x < 0`,\n * `f(x) = x for x >= 0`.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * References:\n *   - [Fast and Accurate Deep Network Learning by Exponential Linear Units\n * (ELUs)](https://arxiv.org/abs/1511.07289v1)\n *\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nfunction elu(args) {\n  return new _advanced_activations.ELU(args);\n}\n/**\n * Rectified Linear Unit activation function.\n *\n * Input shape:\n *   Arbitrary. Use the config field `inputShape` (Array of integers, does\n *   not include the sample axis) when using this layer as the first layer\n *   in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nfunction reLU(args) {\n  return new _advanced_activations.ReLU(args);\n}\n/**\n * Leaky version of a rectified linear unit.\n *\n * It allows a small gradient when the unit is not active:\n * `f(x) = alpha * x for x < 0.`\n * `f(x) = x for x >= 0.`\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nfunction leakyReLU(args) {\n  return new _advanced_activations.LeakyReLU(args);\n}\n/**\n * Parameterized version of a leaky rectified linear unit.\n *\n * It follows\n * `f(x) = alpha * x for x < 0.`\n * `f(x) = x for x >= 0.`\n * wherein `alpha` is a trainable weight.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nfunction prelu(args) {\n  return new _advanced_activations.PReLU(args);\n}\n/**\n * Softmax activation layer.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nfunction softmax(args) {\n  return new _advanced_activations.Softmax(args);\n}\n/**\n * Thresholded Rectified Linear Unit.\n *\n * It follows:\n * `f(x) = x for x > theta`,\n * `f(x) = 0 otherwise`.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * References:\n *   - [Zero-Bias Autoencoders and the Benefits of Co-Adapting\n * Features](http://arxiv.org/abs/1402.3337)\n *\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nfunction thresholdedReLU(args) {\n  return new _advanced_activations.ThresholdedReLU(args);\n}\n// Convolutional Layers.\n/**\n * 1D convolution layer (e.g., temporal convolution).\n *\n * This layer creates a convolution kernel that is convolved\n * with the layer input over a single spatial (or temporal) dimension\n * to produce a tensor of outputs.\n *\n * If `use_bias` is True, a bias vector is created and added to the outputs.\n *\n * If `activation` is not `null`, it is applied to the outputs as well.\n *\n * When using this layer as the first layer in a model, provide an\n * `inputShape` argument `Array` or `null`.\n *\n * For example, `inputShape` would be:\n * - `[10, 128]` for sequences of 10 vectors of 128-dimensional vectors\n * - `[null, 128]` for variable-length sequences of 128-dimensional vectors.\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional',  namespace: 'layers'}\n */\nfunction conv1d(args) {\n  return new _convolutional.Conv1D(args);\n}\n/**\n * 2D convolution layer (e.g. spatial convolution over images).\n *\n * This layer creates a convolution kernel that is convolved\n * with the layer input to produce a tensor of outputs.\n *\n * If `useBias` is True, a bias vector is created and added to the outputs.\n *\n * If `activation` is not `null`, it is applied to the outputs as well.\n *\n * When using this layer as the first layer in a model,\n * provide the keyword argument `inputShape`\n * (Array of integers, does not include the sample axis),\n * e.g. `inputShape=[128, 128, 3]` for 128x128 RGB pictures\n * in `dataFormat='channelsLast'`.\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nfunction conv2d(args) {\n  return new _convolutional.Conv2D(args);\n}\n/**\n * Transposed convolutional layer (sometimes called Deconvolution).\n *\n * The need for transposed convolutions generally arises\n * from the desire to use a transformation going in the opposite direction of\n * a normal convolution, i.e., from something that has the shape of the output\n * of some convolution to something that has the shape of its input while\n * maintaining a connectivity pattern that is compatible with said\n * convolution.\n *\n * When using this layer as the first layer in a model, provide the\n * configuration `inputShape` (`Array` of integers, does not include the\n * sample axis), e.g., `inputShape: [128, 128, 3]` for 128x128 RGB pictures in\n * `dataFormat: 'channelsLast'`.\n *\n * Input shape:\n *   4D tensor with shape:\n *   `[batch, channels, rows, cols]` if `dataFormat` is `'channelsFirst'`.\n *   or 4D tensor with shape\n *   `[batch, rows, cols, channels]` if `dataFormat` is `'channelsLast'`.\n *\n * Output shape:\n *   4D tensor with shape:\n *   `[batch, filters, newRows, newCols]` if `dataFormat` is\n * `'channelsFirst'`. or 4D tensor with shape:\n *   `[batch, newRows, newCols, filters]` if `dataFormat` is `'channelsLast'`.\n *\n * References:\n *   - [A guide to convolution arithmetic for deep\n * learning](https://arxiv.org/abs/1603.07285v1)\n *   - [Deconvolutional\n * Networks](http://www.matthewzeiler.com/pubs/cvpr2010/cvpr2010.pdf)\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nfunction conv2dTranspose(args) {\n  return new _convolutional.Conv2DTranspose(args);\n}\n/**\n * 3D convolution layer (e.g. spatial convolution over volumes).\n *\n * This layer creates a convolution kernel that is convolved\n * with the layer input to produce a tensor of outputs.\n *\n * If `useBias` is True, a bias vector is created and added to the outputs.\n *\n * If `activation` is not `null`, it is applied to the outputs as well.\n *\n * When using this layer as the first layer in a model,\n * provide the keyword argument `inputShape`\n * (Array of integers, does not include the sample axis),\n * e.g. `inputShape=[128, 128, 128, 1]` for 128x128x128 grayscale volumes\n * in `dataFormat='channelsLast'`.\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nfunction conv3d(args) {\n  return new _convolutional.Conv3D(args);\n}\nfunction conv3dTranspose(args) {\n  return new _convolutional.Conv3DTranspose(args);\n}\n/**\n * Depthwise separable 2D convolution.\n *\n * Separable convolution consists of first performing\n * a depthwise spatial convolution\n * (which acts on each input channel separately)\n * followed by a pointwise convolution which mixes together the resulting\n * output channels. The `depthMultiplier` argument controls how many\n * output channels are generated per input channel in the depthwise step.\n *\n * Intuitively, separable convolutions can be understood as\n * a way to factorize a convolution kernel into two smaller kernels,\n * or as an extreme version of an Inception block.\n *\n * Input shape:\n *   4D tensor with shape:\n *     `[batch, channels, rows, cols]` if data_format='channelsFirst'\n *   or 4D tensor with shape:\n *     `[batch, rows, cols, channels]` if data_format='channelsLast'.\n *\n * Output shape:\n *   4D tensor with shape:\n *     `[batch, filters, newRows, newCols]` if data_format='channelsFirst'\n *   or 4D tensor with shape:\n *     `[batch, newRows, newCols, filters]` if data_format='channelsLast'.\n *     `rows` and `cols` values might have changed due to padding.\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nfunction separableConv2d(args) {\n  return new _convolutional.SeparableConv2D(args);\n}\n/**\n * Cropping layer for 2D input (e.g., image).\n *\n * This layer can crop an input\n * at the top, bottom, left and right side of an image tensor.\n *\n * Input shape:\n *   4D tensor with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, rows, cols, channels]`\n *   - If `data_format` is `\"channels_first\"`:\n *     `[batch, channels, rows, cols]`.\n *\n * Output shape:\n *   4D with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, croppedRows, croppedCols, channels]`\n *    - If `dataFormat` is `\"channelsFirst\"`:\n *     `[batch, channels, croppedRows, croppedCols]`.\n *\n * Examples\n * ```js\n *\n * const model = tf.sequential();\n * model.add(tf.layers.cropping2D({cropping:[[2, 2], [2, 2]],\n *                                inputShape: [128, 128, 3]}));\n * //now output shape is [batch, 124, 124, 3]\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nfunction cropping2D(args) {\n  return new _convolutional.Cropping2D(args);\n}\n/**\n * Upsampling layer for 2D inputs.\n *\n * Repeats the rows and columns of the data\n * by size[0] and size[1] respectively.\n *\n *\n * Input shape:\n *    4D tensor with shape:\n *     - If `dataFormat` is `\"channelsLast\"`:\n *         `[batch, rows, cols, channels]`\n *     - If `dataFormat` is `\"channelsFirst\"`:\n *        `[batch, channels, rows, cols]`\n *\n * Output shape:\n *     4D tensor with shape:\n *     - If `dataFormat` is `\"channelsLast\"`:\n *        `[batch, upsampledRows, upsampledCols, channels]`\n *     - If `dataFormat` is `\"channelsFirst\"`:\n *         `[batch, channels, upsampledRows, upsampledCols]`\n *\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nfunction upSampling2d(args) {\n  return new _convolutional.UpSampling2D(args);\n}\n// Convolutional(depthwise) Layers.\n/**\n * Depthwise separable 2D convolution.\n *\n * Depthwise Separable convolutions consists in performing just the first step\n * in a depthwise spatial convolution (which acts on each input channel\n * separately). The `depthMultiplier` argument controls how many output channels\n * are generated per input channel in the depthwise step.\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nfunction depthwiseConv2d(args) {\n  return new _convolutional_depthwise.DepthwiseConv2D(args);\n}\n// Basic Layers.\n/**\n * Applies an activation function to an output.\n *\n * This layer applies element-wise activation function.  Other layers, notably\n * `dense` can also apply activation functions.  Use this isolated activation\n * function to extract the values before and after the\n * activation. For instance:\n *\n * ```js\n * const input = tf.input({shape: [5]});\n * const denseLayer = tf.layers.dense({units: 1});\n * const activationLayer = tf.layers.activation({activation: 'relu6'});\n *\n * // Obtain the output symbolic tensors by applying the layers in order.\n * const denseOutput = denseLayer.apply(input);\n * const activationOutput = activationLayer.apply(denseOutput);\n *\n * // Create the model based on the inputs.\n * const model = tf.model({\n *     inputs: input,\n *     outputs: [denseOutput, activationOutput]\n * });\n *\n * // Collect both outputs and print separately.\n * const [denseOut, activationOut] = model.predict(tf.randomNormal([6, 5]));\n * denseOut.print();\n * activationOut.print();\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nfunction activation(args) {\n  return new _core.Activation(args);\n}\n/**\n * Creates a dense (fully connected) layer.\n *\n * This layer implements the operation:\n *   `output = activation(dot(input, kernel) + bias)`\n *\n * `activation` is the element-wise activation function\n *   passed as the `activation` argument.\n *\n * `kernel` is a weights matrix created by the layer.\n *\n * `bias` is a bias vector created by the layer (only applicable if `useBias`\n * is `true`).\n *\n * **Input shape:**\n *\n *   nD `tf.Tensor` with shape: `(batchSize, ..., inputDim)`.\n *\n *   The most common situation would be\n *   a 2D input with shape `(batchSize, inputDim)`.\n *\n * **Output shape:**\n *\n *   nD tensor with shape: `(batchSize, ..., units)`.\n *\n *   For instance, for a 2D input with shape `(batchSize, inputDim)`,\n *   the output would have shape `(batchSize, units)`.\n *\n * Note: if the input to the layer has a rank greater than 2, then it is\n * flattened prior to the initial dot product with the kernel.\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nfunction dense(args) {\n  return new _core.Dense(args);\n}\n/**\n * Applies\n * [dropout](http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf) to\n * the input.\n *\n * Dropout consists in randomly setting a fraction `rate` of input units to 0 at\n * each update during training time, which helps prevent overfitting.\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nfunction dropout(args) {\n  return new _core.Dropout(args);\n}\n/**\n * Spatial 1D version of Dropout.\n *\n * This Layer type performs the same function as the Dropout layer, but it drops\n * entire 1D feature maps instead of individual elements. For example, if an\n * input example consists of 3 timesteps and the feature map for each timestep\n * has a size of 4, a `spatialDropout1d` layer may zero out the feature maps\n * of the 1st timesteps and 2nd timesteps completely while sparing all feature\n * elements of the 3rd timestep.\n *\n * If adjacent frames (timesteps) are strongly correlated (as is normally the\n * case in early convolution layers), regular dropout will not regularize the\n * activation and will otherwise just result in merely an effective learning\n * rate decrease. In this case, `spatialDropout1d` will help promote\n * independence among feature maps and should be used instead.\n *\n * **Arguments:**\n *   rate: A floating-point number >=0 and <=1. Fraction of the input elements\n *     to drop.\n *\n * **Input shape:**\n *   3D tensor with shape `(samples, timesteps, channels)`.\n *\n * **Output shape:**\n *   Same as the input shape.\n *\n * References:\n *   - [Efficient Object Localization Using Convolutional\n *      Networks](https://arxiv.org/abs/1411.4280)\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nfunction spatialDropout1d(args) {\n  return new _core.SpatialDropout1D(args);\n}\n/**\n * Flattens the input. Does not affect the batch size.\n *\n * A `Flatten` layer flattens each batch in its inputs to 1D (making the output\n * 2D).\n *\n * For example:\n *\n * ```js\n * const input = tf.input({shape: [4, 3]});\n * const flattenLayer = tf.layers.flatten();\n * // Inspect the inferred output shape of the flatten layer, which\n * // equals `[null, 12]`. The 2nd dimension is 4 * 3, i.e., the result of the\n * // flattening. (The 1st dimension is the undermined batch size.)\n * console.log(JSON.stringify(flattenLayer.apply(input).shape));\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nfunction flatten(args) {\n  return new _core.Flatten(args);\n}\n/**\n * Repeats the input n times in a new dimension.\n *\n * ```js\n *  const model = tf.sequential();\n *  model.add(tf.layers.repeatVector({n: 4, inputShape: [2]}));\n *  const x = tf.tensor2d([[10, 20]]);\n *  // Use the model to do inference on a data point the model hasn't see\n *  model.predict(x).print();\n *  // output shape is now [batch, 2, 4]\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nfunction repeatVector(args) {\n  return new _core.RepeatVector(args);\n}\n/**\n * Reshapes an input to a certain shape.\n *\n * ```js\n * const input = tf.input({shape: [4, 3]});\n * const reshapeLayer = tf.layers.reshape({targetShape: [2, 6]});\n * // Inspect the inferred output shape of the Reshape layer, which\n * // equals `[null, 2, 6]`. (The 1st dimension is the undermined batch size.)\n * console.log(JSON.stringify(reshapeLayer.apply(input).shape));\n * ```\n *\n * Input shape:\n *   Arbitrary, although all dimensions in the input shape must be fixed.\n *   Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n *\n * Output shape:\n *   [batchSize, targetShape[0], targetShape[1], ...,\n *    targetShape[targetShape.length - 1]].\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nfunction reshape(args) {\n  return new _core.Reshape(args);\n}\n/**\n * Permutes the dimensions of the input according to a given pattern.\n *\n * Useful for, e.g., connecting RNNs and convnets together.\n *\n * Example:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.permute({\n *   dims: [2, 1],\n *   inputShape: [10, 64]\n * }));\n * console.log(model.outputShape);\n * // Now model's output shape is [null, 64, 10], where null is the\n * // unpermuted sample (batch) dimension.\n * ```\n *\n * Input shape:\n *   Arbitrary. Use the configuration field `inputShape` when using this\n *   layer as the first layer in a model.\n *\n * Output shape:\n *   Same rank as the input shape, but with the dimensions re-ordered (i.e.,\n *   permuted) according to the `dims` configuration of this layer.\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nfunction permute(args) {\n  return new _core.Permute(args);\n}\n/**\n * Maps positive integers (indices) into dense vectors of fixed size.\n * E.g. [[4], [20]] -> [[0.25, 0.1], [0.6, -0.2]]\n *\n * **Input shape:** 2D tensor with shape: `[batchSize, sequenceLength]`.\n *\n * **Output shape:** 3D tensor with shape: `[batchSize, sequenceLength,\n * outputDim]`.\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nfunction embedding(args) {\n  return new _embeddings.Embedding(args);\n}\n// Merge Layers.\n/**\n * Layer that performs element-wise addition on an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape, and returns a\n * single tensor (also of the same shape). The inputs are specified as an\n * `Array` when the `apply` method of the `Add` layer instance is called. For\n * example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const addLayer = tf.layers.add();\n * const sum = addLayer.apply([input1, input2]);\n * console.log(JSON.stringify(sum.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}\n */\nfunction add(args) {\n  return new _merge.Add(args);\n}\n/**\n * Layer that performs element-wise averaging on an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape, and returns a\n * single tensor (also of the same shape). For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const averageLayer = tf.layers.average();\n * const average = averageLayer.apply([input1, input2]);\n * console.log(JSON.stringify(average.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}\n */\nfunction average(args) {\n  return new _merge.Average(args);\n}\n/**\n * Layer that concatenates an `Array` of inputs.\n *\n * It takes a list of tensors, all of the same shape except for the\n * concatenation axis, and returns a single tensor, the concatenation\n * of all inputs. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 3]});\n * const concatLayer = tf.layers.concatenate();\n * const output = concatLayer.apply([input1, input2]);\n * console.log(JSON.stringify(output.shape));\n * // You get [null, 2, 5], with the first dimension as the undetermined batch\n * // dimension. The last dimension (5) is the result of concatenating the\n * // last dimensions of the inputs (2 and 3).\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}\n */\nfunction concatenate(args) {\n  return new _merge.Concatenate(args);\n}\n/**\n * Layer that computes the element-wise maximum of an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape, and returns a\n * single tensor (also of the same shape). For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const maxLayer = tf.layers.maximum();\n * const max = maxLayer.apply([input1, input2]);\n * console.log(JSON.stringify(max.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}\n */\nfunction maximum(args) {\n  return new _merge.Maximum(args);\n}\n/**\n * Layer that computes the element-wise minimum of an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape, and returns a\n * single tensor (also of the same shape). For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const minLayer = tf.layers.minimum();\n * const min = minLayer.apply([input1, input2]);\n * console.log(JSON.stringify(min.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}\n */\nfunction minimum(args) {\n  return new _merge.Minimum(args);\n}\n/**\n * Layer that multiplies (element-wise) an `Array` of inputs.\n *\n * It takes as input an Array of tensors, all of the same\n * shape, and returns a single tensor (also of the same shape).\n * For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const input3 = tf.input({shape: [2, 2]});\n * const multiplyLayer = tf.layers.multiply();\n * const product = multiplyLayer.apply([input1, input2, input3]);\n * console.log(product.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n *\n * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}\n */\nfunction multiply(args) {\n  return new _merge.Multiply(args);\n}\n/**\n * Layer that computes a dot product between samples in two tensors.\n *\n * E.g., if applied to a list of two tensors `a` and `b` both of shape\n * `[batchSize, n]`, the output will be a tensor of shape `[batchSize, 1]`,\n * where each entry at index `[i, 0]` will be the dot product between\n * `a[i, :]` and `b[i, :]`.\n *\n * Example:\n *\n * ```js\n * const dotLayer = tf.layers.dot({axes: -1});\n * const x1 = tf.tensor2d([[10, 20], [30, 40]]);\n * const x2 = tf.tensor2d([[-1, -2], [-3, -4]]);\n *\n * // Invoke the layer's apply() method in eager (imperative) mode.\n * const y = dotLayer.apply([x1, x2]);\n * y.print();\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}\n */\nfunction dot(args) {\n  return new _merge.Dot(args);\n}\n// Normalization Layers.\n/**\n * Batch normalization layer (Ioffe and Szegedy, 2014).\n *\n * Normalize the activations of the previous layer at each batch,\n * i.e. applies a transformation that maintains the mean activation\n * close to 0 and the activation standard deviation close to 1.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape` (Array of integers, does\n *   not include the sample axis) when calling the constructor of this class,\n *   if this layer is used as a first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * References:\n *   - [Batch Normalization: Accelerating Deep Network Training by Reducing\n * Internal Covariate Shift](https://arxiv.org/abs/1502.03167)\n *\n * @doc {heading: 'Layers', subheading: 'Normalization', namespace: 'layers'}\n */\nfunction batchNormalization(args) {\n  return new _normalization.BatchNormalization(args);\n}\n/**\n * Layer-normalization layer (Ba et al., 2016).\n *\n * Normalizes the activations of the previous layer for each given example in a\n * batch independently, instead of across a batch like in `batchNormalization`.\n * In other words, this layer applies a transformation that maintains the mean\n * activation within each example close to 0 and activation variance close to 1.\n *\n * Input shape:\n *   Arbitrary. Use the argument `inputShape` when using this layer as the first\n *   layer in a model.\n *\n * Output shape:\n *   Same as input.\n *\n * References:\n *   - [Layer Normalization](https://arxiv.org/abs/1607.06450)\n *\n * @doc {heading: 'Layers', subheading: 'Normalization', namespace: 'layers'}\n */\nfunction layerNormalization(args) {\n  return new _normalization.LayerNormalization(args);\n}\n// Padding Layers.\n/**\n * Zero-padding layer for 2D input (e.g., image).\n *\n * This layer can add rows and columns of zeros\n * at the top, bottom, left and right side of an image tensor.\n *\n * Input shape:\n *   4D tensor with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, rows, cols, channels]`\n *   - If `data_format` is `\"channels_first\"`:\n *     `[batch, channels, rows, cols]`.\n *\n * Output shape:\n *   4D with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, paddedRows, paddedCols, channels]`\n *    - If `dataFormat` is `\"channelsFirst\"`:\n *     `[batch, channels, paddedRows, paddedCols]`.\n *\n * @doc {heading: 'Layers', subheading: 'Padding', namespace: 'layers'}\n */\nfunction zeroPadding2d(args) {\n  return new _padding.ZeroPadding2D(args);\n}\n// Pooling Layers.\n/**\n * Average pooling operation for spatial data.\n *\n * Input shape: `[batchSize, inLength, channels]`\n *\n * Output shape: `[batchSize, pooledLength, channels]`\n *\n * `tf.avgPool1d` is an alias.\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nfunction averagePooling1d(args) {\n  return new _pooling.AveragePooling1D(args);\n}\nfunction avgPool1d(args) {\n  return averagePooling1d(args);\n}\n// For backwards compatibility.\n// See https://github.com/tensorflow/tfjs/issues/152\nfunction avgPooling1d(args) {\n  return averagePooling1d(args);\n}\n/**\n * Average pooling operation for spatial data.\n *\n * Input shape:\n *  - If `dataFormat === CHANNEL_LAST`:\n *      4D tensor with shape:\n *      `[batchSize, rows, cols, channels]`\n *  - If `dataFormat === CHANNEL_FIRST`:\n *      4D tensor with shape:\n *      `[batchSize, channels, rows, cols]`\n *\n * Output shape\n *  - If `dataFormat === CHANNEL_LAST`:\n *      4D tensor with shape:\n *      `[batchSize, pooledRows, pooledCols, channels]`\n *  - If `dataFormat === CHANNEL_FIRST`:\n *      4D tensor with shape:\n *      `[batchSize, channels, pooledRows, pooledCols]`\n *\n * `tf.avgPool2d` is an alias.\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nfunction averagePooling2d(args) {\n  return new _pooling.AveragePooling2D(args);\n}\nfunction avgPool2d(args) {\n  return averagePooling2d(args);\n}\n// For backwards compatibility.\n// See https://github.com/tensorflow/tfjs/issues/152\nfunction avgPooling2d(args) {\n  return averagePooling2d(args);\n}\n/**\n * Average pooling operation for 3D data.\n *\n * Input shape\n *   - If `dataFormat === channelsLast`:\n *       5D tensor with shape:\n *       `[batchSize, depths, rows, cols, channels]`\n *   - If `dataFormat === channelsFirst`:\n *      4D tensor with shape:\n *       `[batchSize, channels, depths, rows, cols]`\n *\n * Output shape\n *   - If `dataFormat=channelsLast`:\n *       5D tensor with shape:\n *       `[batchSize, pooledDepths, pooledRows, pooledCols, channels]`\n *   - If `dataFormat=channelsFirst`:\n *       5D tensor with shape:\n *       `[batchSize, channels, pooledDepths, pooledRows, pooledCols]`\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nfunction averagePooling3d(args) {\n  return new _pooling.AveragePooling3D(args);\n}\nfunction avgPool3d(args) {\n  return averagePooling3d(args);\n}\n// For backwards compatibility.\n// See https://github.com/tensorflow/tfjs/issues/152\nfunction avgPooling3d(args) {\n  return averagePooling3d(args);\n}\n/**\n * Global average pooling operation for temporal data.\n *\n * Input Shape: 3D tensor with shape: `[batchSize, steps, features]`.\n *\n * Output Shape: 2D tensor with shape: `[batchSize, features]`.\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nfunction globalAveragePooling1d(args) {\n  return new _pooling.GlobalAveragePooling1D(args);\n}\n/**\n * Global average pooling operation for spatial data.\n *\n * Input shape:\n *   - If `dataFormat` is `CHANNEL_LAST`:\n *       4D tensor with shape: `[batchSize, rows, cols, channels]`.\n *   - If `dataFormat` is `CHANNEL_FIRST`:\n *       4D tensor with shape: `[batchSize, channels, rows, cols]`.\n *\n * Output shape:\n *   2D tensor with shape: `[batchSize, channels]`.\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nfunction globalAveragePooling2d(args) {\n  return new _pooling.GlobalAveragePooling2D(args);\n}\n/**\n * Global max pooling operation for temporal data.\n *\n * Input Shape: 3D tensor with shape: `[batchSize, steps, features]`.\n *\n * Output Shape: 2D tensor with shape: `[batchSize, features]`.\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nfunction globalMaxPooling1d(args) {\n  return new _pooling.GlobalMaxPooling1D(args);\n}\n/**\n * Global max pooling operation for spatial data.\n *\n * Input shape:\n *   - If `dataFormat` is `CHANNEL_LAST`:\n *       4D tensor with shape: `[batchSize, rows, cols, channels]`.\n *   - If `dataFormat` is `CHANNEL_FIRST`:\n *       4D tensor with shape: `[batchSize, channels, rows, cols]`.\n *\n * Output shape:\n *   2D tensor with shape: `[batchSize, channels]`.\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nfunction globalMaxPooling2d(args) {\n  return new _pooling.GlobalMaxPooling2D(args);\n}\n/**\n * Max pooling operation for temporal data.\n *\n * Input shape:  `[batchSize, inLength, channels]`\n *\n * Output shape: `[batchSize, pooledLength, channels]`\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nfunction maxPooling1d(args) {\n  return new _pooling.MaxPooling1D(args);\n}\n/**\n * Max pooling operation for spatial data.\n *\n * Input shape\n *   - If `dataFormat === CHANNEL_LAST`:\n *       4D tensor with shape:\n *       `[batchSize, rows, cols, channels]`\n *   - If `dataFormat === CHANNEL_FIRST`:\n *      4D tensor with shape:\n *       `[batchSize, channels, rows, cols]`\n *\n * Output shape\n *   - If `dataFormat=CHANNEL_LAST`:\n *       4D tensor with shape:\n *       `[batchSize, pooledRows, pooledCols, channels]`\n *   - If `dataFormat=CHANNEL_FIRST`:\n *       4D tensor with shape:\n *       `[batchSize, channels, pooledRows, pooledCols]`\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nfunction maxPooling2d(args) {\n  return new _pooling.MaxPooling2D(args);\n}\n/**\n * Max pooling operation for 3D data.\n *\n * Input shape\n *   - If `dataFormat === channelsLast`:\n *       5D tensor with shape:\n *       `[batchSize, depths, rows, cols, channels]`\n *   - If `dataFormat === channelsFirst`:\n *      5D tensor with shape:\n *       `[batchSize, channels, depths, rows, cols]`\n *\n * Output shape\n *   - If `dataFormat=channelsLast`:\n *       5D tensor with shape:\n *       `[batchSize, pooledDepths, pooledRows, pooledCols, channels]`\n *   - If `dataFormat=channelsFirst`:\n *       5D tensor with shape:\n *       `[batchSize, channels, pooledDepths, pooledRows, pooledCols]`\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nfunction maxPooling3d(args) {\n  return new _pooling.MaxPooling3D(args);\n}\n// Recurrent Layers.\n/**\n * Gated Recurrent Unit - Cho et al. 2014.\n *\n * This is an `RNN` layer consisting of one `GRUCell`. However, unlike\n * the underlying `GRUCell`, the `apply` method of `SimpleRNN` operates\n * on a sequence of inputs. The shape of the input (not including the first,\n * batch dimension) needs to be at least 2-D, with the first dimension being\n * time steps. For example:\n *\n * ```js\n * const rnn = tf.layers.gru({units: 8, returnSequences: true});\n *\n * // Create an input with 10 time steps.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the `GRUCell`'s number of units.\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nfunction gru(args) {\n  return new _recurrent.GRU(args);\n}\n/**\n * Cell class for `GRU`.\n *\n * `GRUCell` is distinct from the `RNN` subclass `GRU` in that its\n * `apply` method takes the input data of only a single time step and returns\n * the cell's output at the time step, while `GRU` takes the input data\n * over a number of time steps. For example:\n *\n * ```js\n * const cell = tf.layers.gruCell({units: 2});\n * const input = tf.input({shape: [10]});\n * const output = cell.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10]: This is the cell's output at a single time step. The 1st\n * // dimension is the unknown batch size.\n * ```\n *\n * Instance(s) of `GRUCell` can be used to construct `RNN` layers. The\n * most typical use of this workflow is to combine a number of cells into a\n * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an\n * RNN. For example:\n *\n * ```js\n * const cells = [\n *   tf.layers.gruCell({units: 4}),\n *   tf.layers.gruCell({units: 8}),\n * ];\n * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});\n *\n * // Create an input with 10 time steps and a length-20 vector at each step.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the last `gruCell`'s number of units.\n * ```\n *\n * To create an `RNN` consisting of only *one* `GRUCell`, use the\n * `tf.layers.gru`.\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nfunction gruCell(args) {\n  return new _recurrent.GRUCell(args);\n}\n/**\n * Long-Short Term Memory layer - Hochreiter 1997.\n *\n * This is an `RNN` layer consisting of one `LSTMCell`. However, unlike\n * the underlying `LSTMCell`, the `apply` method of `LSTM` operates\n * on a sequence of inputs. The shape of the input (not including the first,\n * batch dimension) needs to be at least 2-D, with the first dimension being\n * time steps. For example:\n *\n * ```js\n * const lstm = tf.layers.lstm({units: 8, returnSequences: true});\n *\n * // Create an input with 10 time steps.\n * const input = tf.input({shape: [10, 20]});\n * const output = lstm.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the `LSTMCell`'s number of units.\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nfunction lstm(args) {\n  return new _recurrent.LSTM(args);\n}\n/**\n * Cell class for `LSTM`.\n *\n * `LSTMCell` is distinct from the `RNN` subclass `LSTM` in that its\n * `apply` method takes the input data of only a single time step and returns\n * the cell's output at the time step, while `LSTM` takes the input data\n * over a number of time steps. For example:\n *\n * ```js\n * const cell = tf.layers.lstmCell({units: 2});\n * const input = tf.input({shape: [10]});\n * const output = cell.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10]: This is the cell's output at a single time step. The 1st\n * // dimension is the unknown batch size.\n * ```\n *\n * Instance(s) of `LSTMCell` can be used to construct `RNN` layers. The\n * most typical use of this workflow is to combine a number of cells into a\n * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an\n * RNN. For example:\n *\n * ```js\n * const cells = [\n *   tf.layers.lstmCell({units: 4}),\n *   tf.layers.lstmCell({units: 8}),\n * ];\n * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});\n *\n * // Create an input with 10 time steps and a length-20 vector at each step.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the last `lstmCell`'s number of units.\n * ```\n *\n * To create an `RNN` consisting of only *one* `LSTMCell`, use the\n * `tf.layers.lstm`.\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nfunction lstmCell(args) {\n  return new _recurrent.LSTMCell(args);\n}\n/**\n * Fully-connected RNN where the output is to be fed back to input.\n *\n * This is an `RNN` layer consisting of one `SimpleRNNCell`. However, unlike\n * the underlying `SimpleRNNCell`, the `apply` method of `SimpleRNN` operates\n * on a sequence of inputs. The shape of the input (not including the first,\n * batch dimension) needs to be at least 2-D, with the first dimension being\n * time steps. For example:\n *\n * ```js\n * const rnn = tf.layers.simpleRNN({units: 8, returnSequences: true});\n *\n * // Create an input with 10 time steps.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the `SimpleRNNCell`'s number of units.\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nfunction simpleRNN(args) {\n  return new _recurrent.SimpleRNN(args);\n}\n/**\n * Cell class for `SimpleRNN`.\n *\n * `SimpleRNNCell` is distinct from the `RNN` subclass `SimpleRNN` in that its\n * `apply` method takes the input data of only a single time step and returns\n * the cell's output at the time step, while `SimpleRNN` takes the input data\n * over a number of time steps. For example:\n *\n * ```js\n * const cell = tf.layers.simpleRNNCell({units: 2});\n * const input = tf.input({shape: [10]});\n * const output = cell.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10]: This is the cell's output at a single time step. The 1st\n * // dimension is the unknown batch size.\n * ```\n *\n * Instance(s) of `SimpleRNNCell` can be used to construct `RNN` layers. The\n * most typical use of this workflow is to combine a number of cells into a\n * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an\n * RNN. For example:\n *\n * ```js\n * const cells = [\n *   tf.layers.simpleRNNCell({units: 4}),\n *   tf.layers.simpleRNNCell({units: 8}),\n * ];\n * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});\n *\n * // Create an input with 10 time steps and a length-20 vector at each step.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the last `SimpleRNNCell`'s number of units.\n * ```\n *\n * To create an `RNN` consisting of only *one* `SimpleRNNCell`, use the\n * `tf.layers.simpleRNN`.\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nfunction simpleRNNCell(args) {\n  return new _recurrent.SimpleRNNCell(args);\n}\n/**\n * Convolutional LSTM layer - Xingjian Shi 2015.\n *\n * This is a `ConvRNN2D` layer consisting of one `ConvLSTM2DCell`. However,\n * unlike the underlying `ConvLSTM2DCell`, the `apply` method of `ConvLSTM2D`\n * operates on a sequence of inputs. The shape of the input (not including the\n * first, batch dimension) needs to be 4-D, with the first dimension being time\n * steps. For example:\n *\n * ```js\n * const filters = 3;\n * const kernelSize = 3;\n *\n * const batchSize = 4;\n * const sequenceLength = 2;\n * const size = 5;\n * const channels = 3;\n *\n * const inputShape = [batchSize, sequenceLength, size, size, channels];\n * const input = tf.ones(inputShape);\n *\n * const layer = tf.layers.convLstm2d({filters, kernelSize});\n *\n * const output = layer.apply(input);\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\nfunction convLstm2d(args) {\n  return new _convolutional_recurrent.ConvLSTM2D(args);\n}\n/**\n * Cell class for `ConvLSTM2D`.\n *\n * `ConvLSTM2DCell` is distinct from the `ConvRNN2D` subclass `ConvLSTM2D` in\n * that its `call` method takes the input data of only a single time step and\n * returns the cell's output at the time step, while `ConvLSTM2D` takes the\n * input data over a number of time steps. For example:\n *\n * ```js\n * const filters = 3;\n * const kernelSize = 3;\n *\n * const sequenceLength = 1;\n * const size = 5;\n * const channels = 3;\n *\n * const inputShape = [sequenceLength, size, size, channels];\n * const input = tf.ones(inputShape);\n *\n * const cell = tf.layers.convLstm2dCell({filters, kernelSize});\n *\n * cell.build(input.shape);\n *\n * const outputSize = size - kernelSize + 1;\n * const outShape = [sequenceLength, outputSize, outputSize, filters];\n *\n * const initialH = tf.zeros(outShape);\n * const initialC = tf.zeros(outShape);\n *\n * const [o, h, c] = cell.call([input, initialH, initialC], {});\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\nfunction convLstm2dCell(args) {\n  return new _convolutional_recurrent.ConvLSTM2DCell(args);\n}\n/**\n * Base class for recurrent layers.\n *\n * Input shape:\n *   3D tensor with shape `[batchSize, timeSteps, inputDim]`.\n *\n * Output shape:\n *   - if `returnState`, an Array of tensors (i.e., `tf.Tensor`s). The first\n *     tensor is the output. The remaining tensors are the states at the\n *     last time step, each with shape `[batchSize, units]`.\n *   - if `returnSequences`, the output will have shape\n *     `[batchSize, timeSteps, units]`.\n *   - else, the output will have shape `[batchSize, units]`.\n *\n * Masking:\n *   This layer supports masking for input data with a variable number\n *   of timesteps. To introduce masks to your data,\n *   use an embedding layer with the `mask_zero` parameter\n *   set to `True`.\n *\n * Notes on using statefulness in RNNs:\n *   You can set RNN layers to be 'stateful', which means that the states\n *   computed for the samples in one batch will be reused as initial states\n *   for the samples in the next batch. This assumes a one-to-one mapping\n *   between samples in different successive batches.\n *\n *   To enable statefulness:\n *     - specify `stateful: true` in the layer constructor.\n *     - specify a fixed batch size for your model, by passing\n *       if sequential model:\n *         `batchInputShape=[...]` to the first layer in your model.\n *       else for functional model with 1 or more Input layers:\n *         `batchShape=[...]` to all the first layers in your model.\n *       This is the expected shape of your inputs *including the batch size*.\n *       It should be a tuple of integers, e.g. `(32, 10, 100)`.\n *     - specify `shuffle=False` when calling fit().\n *\n *   To reset the states of your model, call `.resetStates()` on either\n *   a specific layer, or on your entire model.\n *\n * Note on specifying the initial state of RNNs\n *   You can specify the initial state of RNN layers symbolically by\n *   calling them with the option `initialState`. The value of\n *   `initialState` should be a tensor or list of tensors representing\n *   the initial state of the RNN layer.\n *\n *   You can specify the initial state of RNN layers numerically by\n *   calling `resetStates` with the keyword argument `states`. The value of\n *   `states` should be a numpy array or list of numpy arrays representing\n *   the initial state of the RNN layer.\n *\n * Note on passing external constants to RNNs\n *   You can pass \"external\" constants to the cell using the `constants`\n *   keyword argument of `RNN.call` method. This requires that the `cell.call`\n *   method accepts the same keyword argument `constants`. Such constants\n *   can be used to condition the cell transformation on additional static\n *   inputs (not changing over time), a.k.a. an attention mechanism.\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nfunction rnn(args) {\n  return new _recurrent.RNN(args);\n}\n/**\n * Wrapper allowing a stack of RNN cells to behave as a single cell.\n *\n * Used to implement efficient stacked RNNs.\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nfunction stackedRNNCells(args) {\n  return new _recurrent.StackedRNNCells(args);\n}\n// Wrapper Layers.\n/** @doc {heading: 'Layers', subheading: 'Wrapper', namespace: 'layers'} */\nfunction bidirectional(args) {\n  return new _wrappers.Bidirectional(args);\n}\n/**\n * This wrapper applies a layer to every temporal slice of an input.\n *\n * The input should be at least 3D,  and the dimension of the index `1` will be\n * considered to be the temporal dimension.\n *\n * Consider a batch of 32 samples, where each sample is a sequence of 10 vectors\n * of 16 dimensions. The batch input shape of the layer is then `[32,  10,\n * 16]`, and the `inputShape`, not including the sample dimension, is\n * `[10, 16]`.\n *\n * You can then use `TimeDistributed` to apply a `Dense` layer to each of the 10\n * timesteps, independently:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.timeDistributed({\n *   layer: tf.layers.dense({units: 8}),\n *   inputShape: [10, 16],\n * }));\n *\n * // Now model.outputShape = [null, 10, 8].\n * // The output will then have shape `[32, 10, 8]`.\n *\n * // In subsequent layers, there is no need for `inputShape`:\n * model.add(tf.layers.timeDistributed({layer: tf.layers.dense({units: 32})}));\n * console.log(JSON.stringify(model.outputs[0].shape));\n * // Now model.outputShape = [null, 10, 32].\n * ```\n *\n * The output will then have shape `[32, 10, 32]`.\n *\n * `TimeDistributed` can be used with arbitrary layers, not just `Dense`, for\n * instance a `Conv2D` layer.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.timeDistributed({\n *   layer: tf.layers.conv2d({filters: 64, kernelSize: [3, 3]}),\n *   inputShape: [10, 299, 299, 3],\n * }));\n * console.log(JSON.stringify(model.outputs[0].shape));\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Wrapper', namespace: 'layers'}\n */\nfunction timeDistributed(args) {\n  return new _wrappers.TimeDistributed(args);\n}\n// Aliases for pooling.\nconst globalMaxPool1d = exports.globalMaxPool1d = globalMaxPooling1d;\nconst globalMaxPool2d = exports.globalMaxPool2d = globalMaxPooling2d;\nconst maxPool1d = exports.maxPool1d = maxPooling1d;\nconst maxPool2d = exports.maxPool2d = maxPooling2d;\n/**\n * Apply additive zero-centered Gaussian noise.\n *\n * As it is a regularization layer, it is only active at training time.\n *\n * This is useful to mitigate overfitting\n * (you could see it as a form of random data augmentation).\n * Gaussian Noise (GS) is a natural choice as corruption process\n * for real valued inputs.\n *\n * # Arguments\n * stddev: float, standard deviation of the noise distribution.\n *\n * # Input shape\n * Arbitrary. Use the keyword argument `input_shape`\n * (tuple of integers, does not include the samples axis)\n * when using this layer as the first layer in a model.\n *\n * # Output shape\n * Same shape as input.\n *\n * @doc {heading: 'Layers', subheading: 'Noise', namespace: 'layers'}\n */\nfunction gaussianNoise(args) {\n  return new _noise.GaussianNoise(args);\n}\n/**\n * Apply multiplicative 1-centered Gaussian noise.\n *\n * As it is a regularization layer, it is only active at training time.\n *\n * Arguments:\n *   - `rate`: float, drop probability (as with `Dropout`).\n *     The multiplicative noise will have\n *     standard deviation `sqrt(rate / (1 - rate))`.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape`\n *   (tuple of integers, does not include the samples axis)\n *   when using this layer as the first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * References:\n *   - [Dropout: A Simple Way to Prevent Neural Networks from Overfitting](\n *      http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf)\n *\n * @doc {heading: 'Layers', subheading: 'Noise', namespace: 'layers'}\n */\nfunction gaussianDropout(args) {\n  return new _noise.GaussianDropout(args);\n}\n/**\n * Applies Alpha Dropout to the input.\n *\n * As it is a regularization layer, it is only active at training time.\n *\n * Alpha Dropout is a `Dropout` that keeps mean and variance of inputs\n * to their original values, in order to ensure the self-normalizing property\n * even after this dropout.\n * Alpha Dropout fits well to Scaled Exponential Linear Units\n * by randomly setting activations to the negative saturation value.\n *\n * Arguments:\n *   - `rate`: float, drop probability (as with `Dropout`).\n *     The multiplicative noise will have\n *     standard deviation `sqrt(rate / (1 - rate))`.\n *   - `noise_shape`: A 1-D `Tensor` of type `int32`, representing the\n *     shape for randomly generated keep/drop flags.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape`\n *   (tuple of integers, does not include the samples axis)\n *   when using this layer as the first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * References:\n *   - [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)\n *\n * @doc {heading: 'Layers', subheading: 'Noise', namespace: 'layers'}\n */\nfunction alphaDropout(args) {\n  return new _noise.AlphaDropout(args);\n}\n/**\n * Masks a sequence by using a mask value to skip timesteps.\n *\n * If all features for a given sample timestep are equal to `mask_value`,\n * then the sample timestep will be masked (skipped) in all downstream layers\n * (as long as they support masking).\n *\n * If any downstream layer does not support masking yet receives such\n * an input mask, an exception will be raised.\n *\n * Arguments:\n *   - `maskValue`: Either None or mask value to skip.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape`\n *   (tuple of integers, does not include the samples axis)\n *   when using this layer as the first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * @doc {heading: 'Layers', subheading: 'Mask', namespace: 'layers'}\n */\nfunction masking(args) {\n  return new _core.Masking(args);\n}\n/**\n * A preprocessing layer which rescales input values to a new range.\n *\n * This layer rescales every value of an input (often an image) by multiplying\n * by `scale` and adding `offset`.\n *\n * For instance:\n * 1. To rescale an input in the ``[0, 255]`` range\n * to be in the `[0, 1]` range, you would pass `scale=1/255`.\n * 2. To rescale an input in the ``[0, 255]`` range to be in the `[-1, 1]`\n * range, you would pass `scale=1./127.5, offset=-1`.\n * The rescaling is applied both during training and inference. Inputs can be\n * of integer or floating point dtype, and by default the layer will output\n * floats.\n *\n * Arguments:\n *   - `scale`: Float, the scale to apply to the inputs.\n *   - `offset`: Float, the offset to apply to the inputs.\n *\n * Input shape:\n *   Arbitrary.\n *\n * Output shape:\n *   Same as input.\n *\n * @doc {heading: 'Layers', subheading: 'Rescaling', namespace: 'layers'}\n */\nfunction rescaling(args) {\n  return new _image_preprocessing.Rescaling(args);\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":11,"column":0},"generated":{"line":100,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":11,"column":0},"generated":{"line":100,"column":4}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":11,"column":0},"generated":{"line":100,"column":16}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":11,"column":0},"generated":{"line":100,"column":19}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":11,"column":0},"generated":{"line":100,"column":26}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":12,"column":0},"generated":{"line":101,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":12,"column":0},"generated":{"line":101,"column":4}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":12,"column":0},"generated":{"line":101,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":12,"column":0},"generated":{"line":101,"column":16}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":12,"column":0},"generated":{"line":101,"column":23}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":102,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":102,"column":4}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":102,"column":12}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":102,"column":15}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":102,"column":22}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":14,"column":0},"generated":{"line":103,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":14,"column":0},"generated":{"line":103,"column":4}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":14,"column":0},"generated":{"line":103,"column":25}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":14,"column":0},"generated":{"line":103,"column":28}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":14,"column":0},"generated":{"line":103,"column":35}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":15,"column":0},"generated":{"line":104,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":15,"column":0},"generated":{"line":104,"column":4}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":15,"column":0},"generated":{"line":104,"column":18}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":15,"column":0},"generated":{"line":104,"column":21}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":15,"column":0},"generated":{"line":104,"column":28}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":16,"column":0},"generated":{"line":105,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":16,"column":0},"generated":{"line":105,"column":4}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":16,"column":0},"generated":{"line":105,"column":28}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":16,"column":0},"generated":{"line":105,"column":31}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":16,"column":0},"generated":{"line":105,"column":38}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":106,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":106,"column":4}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":106,"column":28}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":106,"column":31}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":106,"column":38}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":107,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":107,"column":4}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":107,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":107,"column":12}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":107,"column":19}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":108,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":108,"column":4}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":108,"column":15}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":108,"column":18}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":108,"column":25}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":109,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":109,"column":4}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":109,"column":10}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":109,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":109,"column":20}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":110,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":110,"column":4}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":110,"column":10}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":110,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":110,"column":20}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":111,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":111,"column":4}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":111,"column":18}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":111,"column":21}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":111,"column":28}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":112,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":112,"column":4}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":112,"column":12}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":112,"column":15}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":112,"column":22}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":113,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":113,"column":4}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":113,"column":12}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":113,"column":15}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":113,"column":22}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":114,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":114,"column":4}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":114,"column":14}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":114,"column":17}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":114,"column":24}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":26,"column":0},"generated":{"line":115,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":26,"column":0},"generated":{"line":115,"column":4}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":26,"column":0},"generated":{"line":115,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":26,"column":0},"generated":{"line":115,"column":16}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":26,"column":0},"generated":{"line":115,"column":23}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":27,"column":0},"generated":{"line":116,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":27,"column":0},"generated":{"line":116,"column":4}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":27,"column":0},"generated":{"line":116,"column":24}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":27,"column":0},"generated":{"line":116,"column":27}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":27,"column":0},"generated":{"line":116,"column":34}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":117,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":29,"column":0},"generated":{"line":127,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":30,"column":0},"generated":{"line":128,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":31,"column":0},"generated":{"line":129,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":33,"column":0},"generated":{"line":130,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":34,"column":0},"generated":{"line":131,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":68,"column":6},"generated":{"line":165,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":68,"column":16},"generated":{"line":165,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":68,"column":26},"generated":{"line":165,"column":19}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":68,"column":27},"generated":{"line":165,"column":20}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":68,"column":47},"generated":{"line":165,"column":24}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":68,"column":47},"generated":{"line":165,"column":26}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":69,"column":2},"generated":{"line":166,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":69,"column":9},"generated":{"line":166,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":69,"column":13},"generated":{"line":166,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":69,"column":23},"generated":{"line":166,"column":36}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":69,"column":24},"generated":{"line":166,"column":37}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":69,"column":28},"generated":{"line":166,"column":41}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":69,"column":29},"generated":{"line":166,"column":42}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":70,"column":0},"generated":{"line":167,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":72,"column":0},"generated":{"line":168,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":74,"column":0},"generated":{"line":169,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":98,"column":6},"generated":{"line":193,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":98,"column":16},"generated":{"line":193,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":98,"column":19},"generated":{"line":193,"column":12}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":98,"column":20},"generated":{"line":193,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":98,"column":39},"generated":{"line":193,"column":17}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":98,"column":39},"generated":{"line":193,"column":19}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":99,"column":2},"generated":{"line":194,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":99,"column":9},"generated":{"line":194,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":99,"column":13},"generated":{"line":194,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":99,"column":16},"generated":{"line":194,"column":38}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":99,"column":17},"generated":{"line":194,"column":39}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":99,"column":21},"generated":{"line":194,"column":43}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":99,"column":22},"generated":{"line":194,"column":44}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":100,"column":0},"generated":{"line":195,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":102,"column":0},"generated":{"line":196,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":119,"column":6},"generated":{"line":213,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":119,"column":16},"generated":{"line":213,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":119,"column":20},"generated":{"line":213,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":119,"column":21},"generated":{"line":213,"column":14}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":119,"column":41},"generated":{"line":213,"column":18}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":119,"column":41},"generated":{"line":213,"column":20}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":120,"column":2},"generated":{"line":214,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":120,"column":9},"generated":{"line":214,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":120,"column":13},"generated":{"line":214,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":120,"column":17},"generated":{"line":214,"column":39}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":120,"column":18},"generated":{"line":214,"column":40}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":120,"column":22},"generated":{"line":214,"column":44}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":120,"column":23},"generated":{"line":214,"column":45}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":121,"column":0},"generated":{"line":215,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":123,"column":0},"generated":{"line":216,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":143,"column":6},"generated":{"line":236,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":143,"column":16},"generated":{"line":236,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":143,"column":25},"generated":{"line":236,"column":18}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":143,"column":26},"generated":{"line":236,"column":19}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":143,"column":51},"generated":{"line":236,"column":23}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":143,"column":51},"generated":{"line":236,"column":25}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":144,"column":2},"generated":{"line":237,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":144,"column":9},"generated":{"line":237,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":144,"column":13},"generated":{"line":237,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":144,"column":22},"generated":{"line":237,"column":44}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":144,"column":23},"generated":{"line":237,"column":45}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":144,"column":27},"generated":{"line":237,"column":49}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":144,"column":28},"generated":{"line":237,"column":50}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":145,"column":0},"generated":{"line":238,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":147,"column":0},"generated":{"line":239,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":168,"column":6},"generated":{"line":260,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":168,"column":16},"generated":{"line":260,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":168,"column":21},"generated":{"line":260,"column":14}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":168,"column":22},"generated":{"line":260,"column":15}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":168,"column":43},"generated":{"line":260,"column":19}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":168,"column":43},"generated":{"line":260,"column":21}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":169,"column":2},"generated":{"line":261,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":169,"column":9},"generated":{"line":261,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":169,"column":13},"generated":{"line":261,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":169,"column":18},"generated":{"line":261,"column":40}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":169,"column":19},"generated":{"line":261,"column":41}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":169,"column":23},"generated":{"line":261,"column":45}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":169,"column":24},"generated":{"line":261,"column":46}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":170,"column":0},"generated":{"line":262,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":172,"column":0},"generated":{"line":263,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":188,"column":6},"generated":{"line":279,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":188,"column":16},"generated":{"line":279,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":188,"column":23},"generated":{"line":279,"column":16}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":188,"column":24},"generated":{"line":279,"column":17}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":188,"column":47},"generated":{"line":279,"column":21}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":188,"column":47},"generated":{"line":279,"column":23}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":189,"column":2},"generated":{"line":280,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":189,"column":9},"generated":{"line":280,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":189,"column":13},"generated":{"line":280,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":189,"column":20},"generated":{"line":280,"column":42}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":189,"column":21},"generated":{"line":280,"column":43}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":189,"column":25},"generated":{"line":280,"column":47}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":189,"column":26},"generated":{"line":280,"column":48}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":190,"column":0},"generated":{"line":281,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":192,"column":0},"generated":{"line":282,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":216,"column":6},"generated":{"line":306,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":216,"column":16},"generated":{"line":306,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":216,"column":31},"generated":{"line":306,"column":24}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":216,"column":32},"generated":{"line":306,"column":25}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":216,"column":63},"generated":{"line":306,"column":29}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":216,"column":63},"generated":{"line":306,"column":31}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":217,"column":2},"generated":{"line":307,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":217,"column":9},"generated":{"line":307,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":217,"column":13},"generated":{"line":307,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":217,"column":28},"generated":{"line":307,"column":50}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":217,"column":29},"generated":{"line":307,"column":51}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":217,"column":33},"generated":{"line":307,"column":55}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":217,"column":34},"generated":{"line":307,"column":56}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":218,"column":0},"generated":{"line":308,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":220,"column":0},"generated":{"line":309,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":222,"column":0},"generated":{"line":310,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":242,"column":6},"generated":{"line":330,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":242,"column":16},"generated":{"line":330,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":242,"column":22},"generated":{"line":330,"column":15}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":242,"column":23},"generated":{"line":330,"column":16}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":242,"column":42},"generated":{"line":330,"column":20}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":242,"column":42},"generated":{"line":330,"column":22}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":243,"column":2},"generated":{"line":331,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":243,"column":9},"generated":{"line":331,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":243,"column":13},"generated":{"line":331,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":243,"column":19},"generated":{"line":331,"column":34}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":243,"column":20},"generated":{"line":331,"column":35}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":243,"column":24},"generated":{"line":331,"column":39}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":243,"column":25},"generated":{"line":331,"column":40}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":244,"column":0},"generated":{"line":332,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":246,"column":0},"generated":{"line":333,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":264,"column":6},"generated":{"line":351,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":264,"column":16},"generated":{"line":351,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":264,"column":22},"generated":{"line":351,"column":15}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":264,"column":23},"generated":{"line":351,"column":16}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":264,"column":42},"generated":{"line":351,"column":20}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":264,"column":42},"generated":{"line":351,"column":22}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":265,"column":2},"generated":{"line":352,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":265,"column":9},"generated":{"line":352,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":265,"column":13},"generated":{"line":352,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":265,"column":19},"generated":{"line":352,"column":34}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":265,"column":20},"generated":{"line":352,"column":35}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":265,"column":24},"generated":{"line":352,"column":39}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":265,"column":25},"generated":{"line":352,"column":40}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":266,"column":0},"generated":{"line":353,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":268,"column":0},"generated":{"line":354,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":303,"column":6},"generated":{"line":389,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":303,"column":16},"generated":{"line":389,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":303,"column":31},"generated":{"line":389,"column":24}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":303,"column":32},"generated":{"line":389,"column":25}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":303,"column":51},"generated":{"line":389,"column":29}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":303,"column":51},"generated":{"line":389,"column":31}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":304,"column":2},"generated":{"line":390,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":304,"column":9},"generated":{"line":390,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":304,"column":13},"generated":{"line":390,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":304,"column":28},"generated":{"line":390,"column":43}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":304,"column":29},"generated":{"line":390,"column":44}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":304,"column":33},"generated":{"line":390,"column":48}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":304,"column":34},"generated":{"line":390,"column":49}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":305,"column":0},"generated":{"line":391,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":307,"column":0},"generated":{"line":392,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":325,"column":6},"generated":{"line":410,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":325,"column":16},"generated":{"line":410,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":325,"column":22},"generated":{"line":410,"column":15}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":325,"column":23},"generated":{"line":410,"column":16}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":325,"column":42},"generated":{"line":410,"column":20}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":325,"column":42},"generated":{"line":410,"column":22}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":326,"column":2},"generated":{"line":411,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":326,"column":9},"generated":{"line":411,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":326,"column":13},"generated":{"line":411,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":326,"column":19},"generated":{"line":411,"column":34}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":326,"column":20},"generated":{"line":411,"column":35}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":326,"column":24},"generated":{"line":411,"column":39}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":326,"column":25},"generated":{"line":411,"column":40}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":327,"column":0},"generated":{"line":412,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":329,"column":6},"generated":{"line":413,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":329,"column":16},"generated":{"line":413,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":329,"column":31},"generated":{"line":413,"column":24}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":329,"column":32},"generated":{"line":413,"column":25}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":329,"column":51},"generated":{"line":413,"column":29}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":329,"column":51},"generated":{"line":413,"column":31}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":330,"column":2},"generated":{"line":414,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":330,"column":9},"generated":{"line":414,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":330,"column":13},"generated":{"line":414,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":330,"column":28},"generated":{"line":414,"column":43}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":330,"column":29},"generated":{"line":414,"column":44}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":330,"column":33},"generated":{"line":414,"column":48}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":330,"column":34},"generated":{"line":414,"column":49}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":331,"column":0},"generated":{"line":415,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":333,"column":0},"generated":{"line":416,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":362,"column":6},"generated":{"line":445,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":362,"column":16},"generated":{"line":445,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":362,"column":31},"generated":{"line":445,"column":24}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":362,"column":32},"generated":{"line":445,"column":25}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":362,"column":60},"generated":{"line":445,"column":29}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":362,"column":60},"generated":{"line":445,"column":31}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":363,"column":2},"generated":{"line":446,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":363,"column":9},"generated":{"line":446,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":363,"column":13},"generated":{"line":446,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":363,"column":28},"generated":{"line":446,"column":43}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":363,"column":29},"generated":{"line":446,"column":44}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":363,"column":33},"generated":{"line":446,"column":48}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":363,"column":34},"generated":{"line":446,"column":49}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":364,"column":0},"generated":{"line":447,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":366,"column":0},"generated":{"line":448,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":397,"column":6},"generated":{"line":479,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":397,"column":16},"generated":{"line":479,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":397,"column":26},"generated":{"line":479,"column":19}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":397,"column":27},"generated":{"line":479,"column":20}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":397,"column":52},"generated":{"line":479,"column":24}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":397,"column":52},"generated":{"line":479,"column":26}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":398,"column":2},"generated":{"line":480,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":398,"column":9},"generated":{"line":480,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":398,"column":13},"generated":{"line":480,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":398,"column":23},"generated":{"line":480,"column":38}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":398,"column":24},"generated":{"line":480,"column":39}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":398,"column":28},"generated":{"line":480,"column":43}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":398,"column":29},"generated":{"line":480,"column":44}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":399,"column":0},"generated":{"line":481,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":401,"column":0},"generated":{"line":482,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":425,"column":6},"generated":{"line":506,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":425,"column":16},"generated":{"line":506,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":425,"column":28},"generated":{"line":506,"column":21}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":425,"column":29},"generated":{"line":506,"column":22}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":425,"column":56},"generated":{"line":506,"column":26}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":425,"column":56},"generated":{"line":506,"column":28}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":426,"column":2},"generated":{"line":507,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":426,"column":9},"generated":{"line":507,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":426,"column":13},"generated":{"line":507,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":426,"column":25},"generated":{"line":507,"column":40}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":426,"column":26},"generated":{"line":507,"column":41}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":426,"column":30},"generated":{"line":507,"column":45}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":426,"column":31},"generated":{"line":507,"column":46}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":427,"column":0},"generated":{"line":508,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":429,"column":0},"generated":{"line":509,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":431,"column":0},"generated":{"line":510,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":441,"column":6},"generated":{"line":520,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":441,"column":16},"generated":{"line":520,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":441,"column":31},"generated":{"line":520,"column":24}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":441,"column":32},"generated":{"line":520,"column":25}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":441,"column":62},"generated":{"line":520,"column":29}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":441,"column":62},"generated":{"line":520,"column":31}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":442,"column":2},"generated":{"line":521,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":442,"column":9},"generated":{"line":521,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":442,"column":13},"generated":{"line":521,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":442,"column":28},"generated":{"line":521,"column":53}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":442,"column":29},"generated":{"line":521,"column":54}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":442,"column":33},"generated":{"line":521,"column":58}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":442,"column":34},"generated":{"line":521,"column":59}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":443,"column":0},"generated":{"line":522,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":445,"column":0},"generated":{"line":523,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":447,"column":0},"generated":{"line":524,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":478,"column":6},"generated":{"line":555,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":478,"column":16},"generated":{"line":555,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":478,"column":26},"generated":{"line":555,"column":19}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":478,"column":27},"generated":{"line":555,"column":20}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":478,"column":52},"generated":{"line":555,"column":24}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":478,"column":52},"generated":{"line":555,"column":26}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":479,"column":2},"generated":{"line":556,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":479,"column":9},"generated":{"line":556,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":479,"column":13},"generated":{"line":556,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":479,"column":23},"generated":{"line":556,"column":29}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":479,"column":24},"generated":{"line":556,"column":30}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":479,"column":28},"generated":{"line":556,"column":34}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":479,"column":29},"generated":{"line":556,"column":35}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":480,"column":0},"generated":{"line":557,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":482,"column":0},"generated":{"line":558,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":515,"column":6},"generated":{"line":591,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":515,"column":16},"generated":{"line":591,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":515,"column":21},"generated":{"line":591,"column":14}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":515,"column":22},"generated":{"line":591,"column":15}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":515,"column":42},"generated":{"line":591,"column":19}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":515,"column":42},"generated":{"line":591,"column":21}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":516,"column":2},"generated":{"line":592,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":516,"column":9},"generated":{"line":592,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":516,"column":13},"generated":{"line":592,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":516,"column":18},"generated":{"line":592,"column":24}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":516,"column":19},"generated":{"line":592,"column":25}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":516,"column":23},"generated":{"line":592,"column":29}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":516,"column":24},"generated":{"line":592,"column":30}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":517,"column":0},"generated":{"line":593,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":519,"column":0},"generated":{"line":594,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":529,"column":6},"generated":{"line":604,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":529,"column":16},"generated":{"line":604,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":529,"column":23},"generated":{"line":604,"column":16}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":529,"column":24},"generated":{"line":604,"column":17}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":529,"column":46},"generated":{"line":604,"column":21}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":529,"column":46},"generated":{"line":604,"column":23}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":530,"column":2},"generated":{"line":605,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":530,"column":9},"generated":{"line":605,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":530,"column":13},"generated":{"line":605,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":530,"column":20},"generated":{"line":605,"column":26}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":530,"column":21},"generated":{"line":605,"column":27}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":530,"column":25},"generated":{"line":605,"column":31}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":530,"column":26},"generated":{"line":605,"column":32}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":531,"column":0},"generated":{"line":606,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":533,"column":0},"generated":{"line":607,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":565,"column":6},"generated":{"line":639,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":565,"column":16},"generated":{"line":639,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":565,"column":32},"generated":{"line":639,"column":25}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":565,"column":33},"generated":{"line":639,"column":26}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":565,"column":66},"generated":{"line":639,"column":30}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":565,"column":66},"generated":{"line":639,"column":32}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":566,"column":2},"generated":{"line":640,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":566,"column":9},"generated":{"line":640,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":566,"column":13},"generated":{"line":640,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":566,"column":29},"generated":{"line":640,"column":35}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":566,"column":30},"generated":{"line":640,"column":36}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":566,"column":34},"generated":{"line":640,"column":40}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":566,"column":35},"generated":{"line":640,"column":41}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":567,"column":0},"generated":{"line":641,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":569,"column":0},"generated":{"line":642,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":588,"column":6},"generated":{"line":661,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":588,"column":16},"generated":{"line":661,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":588,"column":23},"generated":{"line":661,"column":16}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":588,"column":24},"generated":{"line":661,"column":17}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":588,"column":47},"generated":{"line":661,"column":21}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":588,"column":47},"generated":{"line":661,"column":23}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":589,"column":2},"generated":{"line":662,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":589,"column":9},"generated":{"line":662,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":589,"column":13},"generated":{"line":662,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":589,"column":20},"generated":{"line":662,"column":26}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":589,"column":21},"generated":{"line":662,"column":27}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":589,"column":25},"generated":{"line":662,"column":31}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":589,"column":26},"generated":{"line":662,"column":32}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":590,"column":0},"generated":{"line":663,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":592,"column":0},"generated":{"line":664,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":606,"column":6},"generated":{"line":678,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":606,"column":16},"generated":{"line":678,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":606,"column":28},"generated":{"line":678,"column":21}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":606,"column":29},"generated":{"line":678,"column":22}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":606,"column":56},"generated":{"line":678,"column":26}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":606,"column":56},"generated":{"line":678,"column":28}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":607,"column":2},"generated":{"line":679,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":607,"column":9},"generated":{"line":679,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":607,"column":13},"generated":{"line":679,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":607,"column":25},"generated":{"line":679,"column":31}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":607,"column":26},"generated":{"line":679,"column":32}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":607,"column":30},"generated":{"line":679,"column":36}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":607,"column":31},"generated":{"line":679,"column":37}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":608,"column":0},"generated":{"line":680,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":610,"column":0},"generated":{"line":681,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":633,"column":6},"generated":{"line":704,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":633,"column":16},"generated":{"line":704,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":633,"column":23},"generated":{"line":704,"column":16}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":633,"column":24},"generated":{"line":704,"column":17}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":633,"column":46},"generated":{"line":704,"column":21}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":633,"column":46},"generated":{"line":704,"column":23}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":634,"column":2},"generated":{"line":705,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":634,"column":9},"generated":{"line":705,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":634,"column":13},"generated":{"line":705,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":634,"column":20},"generated":{"line":705,"column":26}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":634,"column":21},"generated":{"line":705,"column":27}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":634,"column":25},"generated":{"line":705,"column":31}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":634,"column":26},"generated":{"line":705,"column":32}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":635,"column":0},"generated":{"line":706,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":637,"column":0},"generated":{"line":707,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":665,"column":6},"generated":{"line":735,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":665,"column":16},"generated":{"line":735,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":665,"column":23},"generated":{"line":735,"column":16}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":665,"column":24},"generated":{"line":735,"column":17}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":665,"column":46},"generated":{"line":735,"column":21}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":665,"column":46},"generated":{"line":735,"column":23}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":666,"column":2},"generated":{"line":736,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":666,"column":9},"generated":{"line":736,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":666,"column":13},"generated":{"line":736,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":666,"column":20},"generated":{"line":736,"column":26}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":666,"column":21},"generated":{"line":736,"column":27}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":666,"column":25},"generated":{"line":736,"column":31}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":666,"column":26},"generated":{"line":736,"column":32}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":667,"column":0},"generated":{"line":737,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":669,"column":0},"generated":{"line":738,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":680,"column":6},"generated":{"line":749,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":680,"column":16},"generated":{"line":749,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":680,"column":25},"generated":{"line":749,"column":18}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":680,"column":26},"generated":{"line":749,"column":19}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":680,"column":50},"generated":{"line":749,"column":23}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":680,"column":50},"generated":{"line":749,"column":25}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":681,"column":2},"generated":{"line":750,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":681,"column":9},"generated":{"line":750,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":681,"column":13},"generated":{"line":750,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":681,"column":22},"generated":{"line":750,"column":34}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":681,"column":23},"generated":{"line":750,"column":35}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":681,"column":27},"generated":{"line":750,"column":39}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":681,"column":28},"generated":{"line":750,"column":40}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":682,"column":0},"generated":{"line":751,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":684,"column":0},"generated":{"line":752,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":686,"column":0},"generated":{"line":753,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":706,"column":6},"generated":{"line":773,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":706,"column":16},"generated":{"line":773,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":706,"column":19},"generated":{"line":773,"column":12}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":706,"column":20},"generated":{"line":773,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":706,"column":36},"generated":{"line":773,"column":17}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":706,"column":36},"generated":{"line":773,"column":19}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":707,"column":2},"generated":{"line":774,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":707,"column":9},"generated":{"line":774,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":707,"column":13},"generated":{"line":774,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":707,"column":16},"generated":{"line":774,"column":23}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":707,"column":17},"generated":{"line":774,"column":24}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":707,"column":21},"generated":{"line":774,"column":28}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":707,"column":22},"generated":{"line":774,"column":29}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":708,"column":0},"generated":{"line":775,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":710,"column":0},"generated":{"line":776,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":728,"column":6},"generated":{"line":794,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":728,"column":16},"generated":{"line":794,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":728,"column":23},"generated":{"line":794,"column":16}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":728,"column":24},"generated":{"line":794,"column":17}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":728,"column":40},"generated":{"line":794,"column":21}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":728,"column":40},"generated":{"line":794,"column":23}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":729,"column":2},"generated":{"line":795,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":729,"column":9},"generated":{"line":795,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":729,"column":13},"generated":{"line":795,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":729,"column":20},"generated":{"line":795,"column":27}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":729,"column":21},"generated":{"line":795,"column":28}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":729,"column":25},"generated":{"line":795,"column":32}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":729,"column":26},"generated":{"line":795,"column":33}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":730,"column":0},"generated":{"line":796,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":732,"column":0},"generated":{"line":797,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":752,"column":6},"generated":{"line":817,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":752,"column":16},"generated":{"line":817,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":752,"column":27},"generated":{"line":817,"column":20}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":752,"column":28},"generated":{"line":817,"column":21}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":752,"column":55},"generated":{"line":817,"column":25}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":752,"column":55},"generated":{"line":817,"column":27}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":753,"column":2},"generated":{"line":818,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":753,"column":9},"generated":{"line":818,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":753,"column":13},"generated":{"line":818,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":753,"column":24},"generated":{"line":818,"column":31}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":753,"column":25},"generated":{"line":818,"column":32}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":753,"column":29},"generated":{"line":818,"column":36}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":753,"column":30},"generated":{"line":818,"column":37}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":754,"column":0},"generated":{"line":819,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":756,"column":0},"generated":{"line":820,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":774,"column":6},"generated":{"line":838,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":774,"column":16},"generated":{"line":838,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":774,"column":23},"generated":{"line":838,"column":16}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":774,"column":24},"generated":{"line":838,"column":17}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":774,"column":40},"generated":{"line":838,"column":21}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":774,"column":40},"generated":{"line":838,"column":23}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":775,"column":2},"generated":{"line":839,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":775,"column":9},"generated":{"line":839,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":775,"column":13},"generated":{"line":839,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":775,"column":20},"generated":{"line":839,"column":27}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":775,"column":21},"generated":{"line":839,"column":28}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":775,"column":25},"generated":{"line":839,"column":32}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":775,"column":26},"generated":{"line":839,"column":33}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":776,"column":0},"generated":{"line":840,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":778,"column":0},"generated":{"line":841,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":796,"column":6},"generated":{"line":859,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":796,"column":16},"generated":{"line":859,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":796,"column":23},"generated":{"line":859,"column":16}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":796,"column":24},"generated":{"line":859,"column":17}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":796,"column":40},"generated":{"line":859,"column":21}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":796,"column":40},"generated":{"line":859,"column":23}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":797,"column":2},"generated":{"line":860,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":797,"column":9},"generated":{"line":860,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":797,"column":13},"generated":{"line":860,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":797,"column":20},"generated":{"line":860,"column":27}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":797,"column":21},"generated":{"line":860,"column":28}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":797,"column":25},"generated":{"line":860,"column":32}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":797,"column":26},"generated":{"line":860,"column":33}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":798,"column":0},"generated":{"line":861,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":800,"column":0},"generated":{"line":862,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":819,"column":6},"generated":{"line":881,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":819,"column":16},"generated":{"line":881,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":819,"column":24},"generated":{"line":881,"column":17}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":819,"column":25},"generated":{"line":881,"column":18}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":819,"column":41},"generated":{"line":881,"column":22}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":819,"column":41},"generated":{"line":881,"column":24}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":820,"column":2},"generated":{"line":882,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":820,"column":9},"generated":{"line":882,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":820,"column":13},"generated":{"line":882,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":820,"column":21},"generated":{"line":882,"column":28}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":820,"column":22},"generated":{"line":882,"column":29}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":820,"column":26},"generated":{"line":882,"column":33}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":820,"column":27},"generated":{"line":882,"column":34}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":821,"column":0},"generated":{"line":883,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":823,"column":0},"generated":{"line":884,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":845,"column":6},"generated":{"line":906,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":845,"column":16},"generated":{"line":906,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":845,"column":19},"generated":{"line":906,"column":12}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":845,"column":20},"generated":{"line":906,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":845,"column":38},"generated":{"line":906,"column":17}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":845,"column":38},"generated":{"line":906,"column":19}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":846,"column":2},"generated":{"line":907,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":846,"column":9},"generated":{"line":907,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":846,"column":13},"generated":{"line":907,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":846,"column":16},"generated":{"line":907,"column":23}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":846,"column":17},"generated":{"line":907,"column":24}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":846,"column":21},"generated":{"line":907,"column":28}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":846,"column":22},"generated":{"line":907,"column":29}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":847,"column":0},"generated":{"line":908,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":849,"column":0},"generated":{"line":909,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":851,"column":0},"generated":{"line":910,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":872,"column":6},"generated":{"line":931,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":872,"column":16},"generated":{"line":931,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":872,"column":34},"generated":{"line":931,"column":27}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":872,"column":35},"generated":{"line":931,"column":28}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":872,"column":69},"generated":{"line":931,"column":32}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":872,"column":69},"generated":{"line":931,"column":34}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":873,"column":2},"generated":{"line":932,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":873,"column":9},"generated":{"line":932,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":873,"column":13},"generated":{"line":932,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":873,"column":31},"generated":{"line":932,"column":46}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":873,"column":32},"generated":{"line":932,"column":47}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":873,"column":36},"generated":{"line":932,"column":51}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":873,"column":37},"generated":{"line":932,"column":52}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":874,"column":0},"generated":{"line":933,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":876,"column":0},"generated":{"line":934,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":896,"column":6},"generated":{"line":954,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":896,"column":16},"generated":{"line":954,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":896,"column":34},"generated":{"line":954,"column":27}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":896,"column":35},"generated":{"line":954,"column":28}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":896,"column":69},"generated":{"line":954,"column":32}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":896,"column":69},"generated":{"line":954,"column":34}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":897,"column":2},"generated":{"line":955,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":897,"column":9},"generated":{"line":955,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":897,"column":13},"generated":{"line":955,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":897,"column":31},"generated":{"line":955,"column":46}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":897,"column":32},"generated":{"line":955,"column":47}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":897,"column":36},"generated":{"line":955,"column":51}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":897,"column":37},"generated":{"line":955,"column":52}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":898,"column":0},"generated":{"line":956,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":900,"column":0},"generated":{"line":957,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":902,"column":0},"generated":{"line":958,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":924,"column":6},"generated":{"line":980,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":924,"column":16},"generated":{"line":980,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":924,"column":29},"generated":{"line":980,"column":22}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":924,"column":30},"generated":{"line":980,"column":23}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":924,"column":59},"generated":{"line":980,"column":27}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":924,"column":59},"generated":{"line":980,"column":29}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":925,"column":2},"generated":{"line":981,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":925,"column":9},"generated":{"line":981,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":925,"column":13},"generated":{"line":981,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":925,"column":26},"generated":{"line":981,"column":35}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":925,"column":27},"generated":{"line":981,"column":36}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":925,"column":31},"generated":{"line":981,"column":40}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":925,"column":32},"generated":{"line":981,"column":41}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":926,"column":0},"generated":{"line":982,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":928,"column":0},"generated":{"line":983,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":930,"column":0},"generated":{"line":984,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":941,"column":6},"generated":{"line":995,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":941,"column":16},"generated":{"line":995,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":941,"column":32},"generated":{"line":995,"column":25}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":941,"column":33},"generated":{"line":995,"column":26}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":941,"column":57},"generated":{"line":995,"column":30}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":941,"column":57},"generated":{"line":995,"column":32}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":942,"column":2},"generated":{"line":996,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":942,"column":9},"generated":{"line":996,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":942,"column":13},"generated":{"line":996,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":942,"column":29},"generated":{"line":996,"column":38}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":942,"column":30},"generated":{"line":996,"column":39}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":942,"column":34},"generated":{"line":996,"column":43}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":942,"column":35},"generated":{"line":996,"column":44}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":943,"column":0},"generated":{"line":997,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":944,"column":6},"generated":{"line":998,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":944,"column":16},"generated":{"line":998,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":944,"column":25},"generated":{"line":998,"column":18}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":944,"column":26},"generated":{"line":998,"column":19}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":944,"column":50},"generated":{"line":998,"column":23}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":944,"column":50},"generated":{"line":998,"column":25}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":945,"column":2},"generated":{"line":999,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":945,"column":9},"generated":{"line":999,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":945,"column":25},"generated":{"line":999,"column":25}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":945,"column":26},"generated":{"line":999,"column":26}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":945,"column":30},"generated":{"line":999,"column":30}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":945,"column":31},"generated":{"line":999,"column":31}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":946,"column":0},"generated":{"line":1000,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":947,"column":0},"generated":{"line":1001,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":948,"column":0},"generated":{"line":1002,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":949,"column":6},"generated":{"line":1003,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":949,"column":16},"generated":{"line":1003,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":949,"column":28},"generated":{"line":1003,"column":21}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":949,"column":29},"generated":{"line":1003,"column":22}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":949,"column":53},"generated":{"line":1003,"column":26}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":949,"column":53},"generated":{"line":1003,"column":28}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":950,"column":2},"generated":{"line":1004,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":950,"column":9},"generated":{"line":1004,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":950,"column":25},"generated":{"line":1004,"column":25}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":950,"column":26},"generated":{"line":1004,"column":26}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":950,"column":30},"generated":{"line":1004,"column":30}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":950,"column":31},"generated":{"line":1004,"column":31}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":951,"column":0},"generated":{"line":1005,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":953,"column":0},"generated":{"line":1006,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":976,"column":6},"generated":{"line":1029,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":976,"column":16},"generated":{"line":1029,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":976,"column":32},"generated":{"line":1029,"column":25}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":976,"column":33},"generated":{"line":1029,"column":26}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":976,"column":57},"generated":{"line":1029,"column":30}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":976,"column":57},"generated":{"line":1029,"column":32}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":977,"column":2},"generated":{"line":1030,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":977,"column":9},"generated":{"line":1030,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":977,"column":13},"generated":{"line":1030,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":977,"column":29},"generated":{"line":1030,"column":38}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":977,"column":30},"generated":{"line":1030,"column":39}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":977,"column":34},"generated":{"line":1030,"column":43}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":977,"column":35},"generated":{"line":1030,"column":44}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":978,"column":0},"generated":{"line":1031,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":979,"column":6},"generated":{"line":1032,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":979,"column":16},"generated":{"line":1032,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":979,"column":25},"generated":{"line":1032,"column":18}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":979,"column":26},"generated":{"line":1032,"column":19}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":979,"column":50},"generated":{"line":1032,"column":23}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":979,"column":50},"generated":{"line":1032,"column":25}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":980,"column":2},"generated":{"line":1033,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":980,"column":9},"generated":{"line":1033,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":980,"column":25},"generated":{"line":1033,"column":25}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":980,"column":26},"generated":{"line":1033,"column":26}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":980,"column":30},"generated":{"line":1033,"column":30}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":980,"column":31},"generated":{"line":1033,"column":31}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":981,"column":0},"generated":{"line":1034,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":982,"column":0},"generated":{"line":1035,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":983,"column":0},"generated":{"line":1036,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":984,"column":6},"generated":{"line":1037,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":984,"column":16},"generated":{"line":1037,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":984,"column":28},"generated":{"line":1037,"column":21}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":984,"column":29},"generated":{"line":1037,"column":22}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":984,"column":53},"generated":{"line":1037,"column":26}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":984,"column":53},"generated":{"line":1037,"column":28}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":985,"column":2},"generated":{"line":1038,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":985,"column":9},"generated":{"line":1038,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":985,"column":25},"generated":{"line":1038,"column":25}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":985,"column":26},"generated":{"line":1038,"column":26}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":985,"column":30},"generated":{"line":1038,"column":30}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":985,"column":31},"generated":{"line":1038,"column":31}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":986,"column":0},"generated":{"line":1039,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":988,"column":0},"generated":{"line":1040,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1009,"column":6},"generated":{"line":1061,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1009,"column":16},"generated":{"line":1061,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1009,"column":32},"generated":{"line":1061,"column":25}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1009,"column":33},"generated":{"line":1061,"column":26}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1009,"column":57},"generated":{"line":1061,"column":30}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1009,"column":57},"generated":{"line":1061,"column":32}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1010,"column":2},"generated":{"line":1062,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1010,"column":9},"generated":{"line":1062,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1010,"column":13},"generated":{"line":1062,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1010,"column":29},"generated":{"line":1062,"column":38}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1010,"column":30},"generated":{"line":1062,"column":39}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1010,"column":34},"generated":{"line":1062,"column":43}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1010,"column":35},"generated":{"line":1062,"column":44}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1011,"column":0},"generated":{"line":1063,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1012,"column":6},"generated":{"line":1064,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1012,"column":16},"generated":{"line":1064,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1012,"column":25},"generated":{"line":1064,"column":18}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1012,"column":26},"generated":{"line":1064,"column":19}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1012,"column":50},"generated":{"line":1064,"column":23}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1012,"column":50},"generated":{"line":1064,"column":25}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1013,"column":2},"generated":{"line":1065,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1013,"column":9},"generated":{"line":1065,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1013,"column":25},"generated":{"line":1065,"column":25}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1013,"column":26},"generated":{"line":1065,"column":26}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1013,"column":30},"generated":{"line":1065,"column":30}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1013,"column":31},"generated":{"line":1065,"column":31}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1014,"column":0},"generated":{"line":1066,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1015,"column":0},"generated":{"line":1067,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1016,"column":0},"generated":{"line":1068,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1017,"column":6},"generated":{"line":1069,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1017,"column":16},"generated":{"line":1069,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1017,"column":28},"generated":{"line":1069,"column":21}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1017,"column":29},"generated":{"line":1069,"column":22}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1017,"column":53},"generated":{"line":1069,"column":26}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1017,"column":53},"generated":{"line":1069,"column":28}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1018,"column":2},"generated":{"line":1070,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1018,"column":9},"generated":{"line":1070,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1018,"column":25},"generated":{"line":1070,"column":25}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1018,"column":26},"generated":{"line":1070,"column":26}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1018,"column":30},"generated":{"line":1070,"column":30}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1018,"column":31},"generated":{"line":1070,"column":31}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1019,"column":0},"generated":{"line":1071,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1021,"column":0},"generated":{"line":1072,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1030,"column":6},"generated":{"line":1081,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1030,"column":16},"generated":{"line":1081,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1030,"column":38},"generated":{"line":1081,"column":31}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1030,"column":39},"generated":{"line":1081,"column":32}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1030,"column":55},"generated":{"line":1081,"column":36}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1030,"column":55},"generated":{"line":1081,"column":38}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1031,"column":2},"generated":{"line":1082,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1031,"column":9},"generated":{"line":1082,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1031,"column":13},"generated":{"line":1082,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1031,"column":35},"generated":{"line":1082,"column":44}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1031,"column":36},"generated":{"line":1082,"column":45}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1031,"column":40},"generated":{"line":1082,"column":49}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1031,"column":41},"generated":{"line":1082,"column":50}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1032,"column":0},"generated":{"line":1083,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1034,"column":0},"generated":{"line":1084,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1048,"column":6},"generated":{"line":1098,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1048,"column":16},"generated":{"line":1098,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1048,"column":38},"generated":{"line":1098,"column":31}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1048,"column":39},"generated":{"line":1098,"column":32}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1048,"column":69},"generated":{"line":1098,"column":36}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1048,"column":69},"generated":{"line":1098,"column":38}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1049,"column":2},"generated":{"line":1099,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1049,"column":9},"generated":{"line":1099,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1049,"column":13},"generated":{"line":1099,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1049,"column":35},"generated":{"line":1099,"column":44}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1049,"column":36},"generated":{"line":1099,"column":45}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1049,"column":40},"generated":{"line":1099,"column":49}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1049,"column":41},"generated":{"line":1099,"column":50}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1050,"column":0},"generated":{"line":1100,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1052,"column":0},"generated":{"line":1101,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1061,"column":6},"generated":{"line":1110,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1061,"column":16},"generated":{"line":1110,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1061,"column":34},"generated":{"line":1110,"column":27}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1061,"column":35},"generated":{"line":1110,"column":28}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1061,"column":51},"generated":{"line":1110,"column":32}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1061,"column":51},"generated":{"line":1110,"column":34}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1062,"column":2},"generated":{"line":1111,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1062,"column":9},"generated":{"line":1111,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1062,"column":13},"generated":{"line":1111,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1062,"column":31},"generated":{"line":1111,"column":40}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1062,"column":32},"generated":{"line":1111,"column":41}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1062,"column":36},"generated":{"line":1111,"column":45}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1062,"column":37},"generated":{"line":1111,"column":46}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1063,"column":0},"generated":{"line":1112,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1065,"column":0},"generated":{"line":1113,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1079,"column":6},"generated":{"line":1127,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1079,"column":16},"generated":{"line":1127,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1079,"column":34},"generated":{"line":1127,"column":27}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1079,"column":35},"generated":{"line":1127,"column":28}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1079,"column":65},"generated":{"line":1127,"column":32}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1079,"column":65},"generated":{"line":1127,"column":34}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1080,"column":2},"generated":{"line":1128,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1080,"column":9},"generated":{"line":1128,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1080,"column":13},"generated":{"line":1128,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1080,"column":31},"generated":{"line":1128,"column":40}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1080,"column":32},"generated":{"line":1128,"column":41}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1080,"column":36},"generated":{"line":1128,"column":45}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1080,"column":37},"generated":{"line":1128,"column":46}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1081,"column":0},"generated":{"line":1129,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1083,"column":0},"generated":{"line":1130,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1092,"column":6},"generated":{"line":1139,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1092,"column":16},"generated":{"line":1139,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1092,"column":28},"generated":{"line":1139,"column":21}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1092,"column":29},"generated":{"line":1139,"column":22}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1092,"column":53},"generated":{"line":1139,"column":26}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1092,"column":53},"generated":{"line":1139,"column":28}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1093,"column":2},"generated":{"line":1140,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1093,"column":9},"generated":{"line":1140,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1093,"column":13},"generated":{"line":1140,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1093,"column":25},"generated":{"line":1140,"column":34}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1093,"column":26},"generated":{"line":1140,"column":35}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1093,"column":30},"generated":{"line":1140,"column":39}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1093,"column":31},"generated":{"line":1140,"column":40}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1094,"column":0},"generated":{"line":1141,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1096,"column":0},"generated":{"line":1142,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1117,"column":6},"generated":{"line":1163,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1117,"column":16},"generated":{"line":1163,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1117,"column":28},"generated":{"line":1163,"column":21}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1117,"column":29},"generated":{"line":1163,"column":22}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1117,"column":53},"generated":{"line":1163,"column":26}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1117,"column":53},"generated":{"line":1163,"column":28}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1118,"column":2},"generated":{"line":1164,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1118,"column":9},"generated":{"line":1164,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1118,"column":13},"generated":{"line":1164,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1118,"column":25},"generated":{"line":1164,"column":34}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1118,"column":26},"generated":{"line":1164,"column":35}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1118,"column":30},"generated":{"line":1164,"column":39}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1118,"column":31},"generated":{"line":1164,"column":40}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1119,"column":0},"generated":{"line":1165,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1121,"column":0},"generated":{"line":1166,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1142,"column":6},"generated":{"line":1187,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1142,"column":16},"generated":{"line":1187,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1142,"column":28},"generated":{"line":1187,"column":21}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1142,"column":29},"generated":{"line":1187,"column":22}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1142,"column":53},"generated":{"line":1187,"column":26}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1142,"column":53},"generated":{"line":1187,"column":28}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1143,"column":2},"generated":{"line":1188,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1143,"column":9},"generated":{"line":1188,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1143,"column":13},"generated":{"line":1188,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1143,"column":25},"generated":{"line":1188,"column":34}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1143,"column":26},"generated":{"line":1188,"column":35}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1143,"column":30},"generated":{"line":1188,"column":39}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1143,"column":31},"generated":{"line":1188,"column":40}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1144,"column":0},"generated":{"line":1189,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1146,"column":0},"generated":{"line":1190,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1148,"column":0},"generated":{"line":1191,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1171,"column":6},"generated":{"line":1214,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1171,"column":16},"generated":{"line":1214,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1171,"column":19},"generated":{"line":1214,"column":12}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1171,"column":20},"generated":{"line":1214,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1171,"column":38},"generated":{"line":1214,"column":17}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1171,"column":38},"generated":{"line":1214,"column":19}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1172,"column":2},"generated":{"line":1215,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1172,"column":9},"generated":{"line":1215,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1172,"column":13},"generated":{"line":1215,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1172,"column":16},"generated":{"line":1215,"column":27}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1172,"column":17},"generated":{"line":1215,"column":28}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1172,"column":21},"generated":{"line":1215,"column":32}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1172,"column":22},"generated":{"line":1215,"column":33}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1173,"column":0},"generated":{"line":1216,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1175,"column":0},"generated":{"line":1217,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1220,"column":6},"generated":{"line":1262,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1220,"column":16},"generated":{"line":1262,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1220,"column":23},"generated":{"line":1262,"column":16}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1220,"column":24},"generated":{"line":1262,"column":17}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1220,"column":46},"generated":{"line":1262,"column":21}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1220,"column":46},"generated":{"line":1262,"column":23}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1221,"column":2},"generated":{"line":1263,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1221,"column":9},"generated":{"line":1263,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1221,"column":13},"generated":{"line":1263,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1221,"column":20},"generated":{"line":1263,"column":31}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1221,"column":21},"generated":{"line":1263,"column":32}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1221,"column":25},"generated":{"line":1263,"column":36}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1221,"column":26},"generated":{"line":1263,"column":37}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1222,"column":0},"generated":{"line":1264,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1224,"column":0},"generated":{"line":1265,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1247,"column":6},"generated":{"line":1288,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1247,"column":16},"generated":{"line":1288,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1247,"column":20},"generated":{"line":1288,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1247,"column":21},"generated":{"line":1288,"column":14}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1247,"column":40},"generated":{"line":1288,"column":18}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1247,"column":40},"generated":{"line":1288,"column":20}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1248,"column":2},"generated":{"line":1289,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1248,"column":9},"generated":{"line":1289,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1248,"column":13},"generated":{"line":1289,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1248,"column":17},"generated":{"line":1289,"column":28}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1248,"column":18},"generated":{"line":1289,"column":29}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1248,"column":22},"generated":{"line":1289,"column":33}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1248,"column":23},"generated":{"line":1289,"column":34}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1249,"column":0},"generated":{"line":1290,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1251,"column":0},"generated":{"line":1291,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1296,"column":6},"generated":{"line":1336,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1296,"column":16},"generated":{"line":1336,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1296,"column":24},"generated":{"line":1336,"column":17}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1296,"column":25},"generated":{"line":1336,"column":18}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1296,"column":48},"generated":{"line":1336,"column":22}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1296,"column":48},"generated":{"line":1336,"column":24}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1297,"column":2},"generated":{"line":1337,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1297,"column":9},"generated":{"line":1337,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1297,"column":13},"generated":{"line":1337,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1297,"column":21},"generated":{"line":1337,"column":32}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1297,"column":22},"generated":{"line":1337,"column":33}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1297,"column":26},"generated":{"line":1337,"column":37}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1297,"column":27},"generated":{"line":1337,"column":38}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1298,"column":0},"generated":{"line":1338,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1300,"column":0},"generated":{"line":1339,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1324,"column":6},"generated":{"line":1363,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1324,"column":16},"generated":{"line":1363,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1324,"column":25},"generated":{"line":1363,"column":18}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1324,"column":26},"generated":{"line":1363,"column":19}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1324,"column":50},"generated":{"line":1363,"column":23}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1324,"column":50},"generated":{"line":1363,"column":25}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1325,"column":2},"generated":{"line":1364,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1325,"column":9},"generated":{"line":1364,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1325,"column":13},"generated":{"line":1364,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1325,"column":22},"generated":{"line":1364,"column":33}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1325,"column":23},"generated":{"line":1364,"column":34}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1325,"column":27},"generated":{"line":1364,"column":38}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1325,"column":28},"generated":{"line":1364,"column":39}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1326,"column":0},"generated":{"line":1365,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1328,"column":0},"generated":{"line":1366,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1373,"column":6},"generated":{"line":1411,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1373,"column":16},"generated":{"line":1411,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1373,"column":29},"generated":{"line":1411,"column":22}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1373,"column":30},"generated":{"line":1411,"column":23}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1373,"column":58},"generated":{"line":1411,"column":27}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1373,"column":58},"generated":{"line":1411,"column":29}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1374,"column":2},"generated":{"line":1412,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1374,"column":9},"generated":{"line":1412,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1374,"column":13},"generated":{"line":1412,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1374,"column":26},"generated":{"line":1412,"column":37}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1374,"column":27},"generated":{"line":1412,"column":38}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1374,"column":31},"generated":{"line":1412,"column":42}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1374,"column":32},"generated":{"line":1412,"column":43}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1375,"column":0},"generated":{"line":1413,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1377,"column":0},"generated":{"line":1414,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1403,"column":0},"generated":{"line":1440,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1404,"column":6},"generated":{"line":1441,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1404,"column":16},"generated":{"line":1441,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1404,"column":26},"generated":{"line":1441,"column":19}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1404,"column":27},"generated":{"line":1441,"column":20}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1404,"column":47},"generated":{"line":1441,"column":24}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1404,"column":47},"generated":{"line":1441,"column":26}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1405,"column":2},"generated":{"line":1442,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1405,"column":9},"generated":{"line":1442,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1405,"column":13},"generated":{"line":1442,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1405,"column":23},"generated":{"line":1442,"column":48}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1405,"column":24},"generated":{"line":1442,"column":49}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1405,"column":28},"generated":{"line":1442,"column":53}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1405,"column":29},"generated":{"line":1442,"column":54}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1406,"column":0},"generated":{"line":1443,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1408,"column":0},"generated":{"line":1444,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1440,"column":0},"generated":{"line":1476,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1441,"column":6},"generated":{"line":1477,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1441,"column":16},"generated":{"line":1477,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1441,"column":30},"generated":{"line":1477,"column":23}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1441,"column":31},"generated":{"line":1477,"column":24}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1441,"column":55},"generated":{"line":1477,"column":28}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1441,"column":55},"generated":{"line":1477,"column":30}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1442,"column":2},"generated":{"line":1478,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1442,"column":9},"generated":{"line":1478,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1442,"column":13},"generated":{"line":1478,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1442,"column":27},"generated":{"line":1478,"column":52}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1442,"column":28},"generated":{"line":1478,"column":53}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1442,"column":32},"generated":{"line":1478,"column":57}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1442,"column":33},"generated":{"line":1478,"column":58}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1443,"column":0},"generated":{"line":1479,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1445,"column":0},"generated":{"line":1480,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1505,"column":6},"generated":{"line":1540,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1505,"column":16},"generated":{"line":1540,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1505,"column":19},"generated":{"line":1540,"column":12}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1505,"column":20},"generated":{"line":1540,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1505,"column":38},"generated":{"line":1540,"column":17}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1505,"column":38},"generated":{"line":1540,"column":19}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1506,"column":2},"generated":{"line":1541,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1506,"column":9},"generated":{"line":1541,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1506,"column":13},"generated":{"line":1541,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1506,"column":16},"generated":{"line":1541,"column":27}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1506,"column":17},"generated":{"line":1541,"column":28}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1506,"column":21},"generated":{"line":1541,"column":32}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1506,"column":22},"generated":{"line":1541,"column":33}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1507,"column":0},"generated":{"line":1542,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1509,"column":0},"generated":{"line":1543,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1516,"column":6},"generated":{"line":1550,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1516,"column":16},"generated":{"line":1550,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1516,"column":31},"generated":{"line":1550,"column":24}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1516,"column":32},"generated":{"line":1550,"column":25}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1516,"column":57},"generated":{"line":1550,"column":29}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1516,"column":57},"generated":{"line":1550,"column":31}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1517,"column":2},"generated":{"line":1551,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1517,"column":9},"generated":{"line":1551,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1517,"column":13},"generated":{"line":1551,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1517,"column":28},"generated":{"line":1551,"column":39}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1517,"column":29},"generated":{"line":1551,"column":40}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1517,"column":33},"generated":{"line":1551,"column":44}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1517,"column":34},"generated":{"line":1551,"column":45}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1518,"column":0},"generated":{"line":1552,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1520,"column":0},"generated":{"line":1553,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1522,"column":0},"generated":{"line":1554,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1523,"column":6},"generated":{"line":1555,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1523,"column":16},"generated":{"line":1555,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1523,"column":29},"generated":{"line":1555,"column":22}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1523,"column":30},"generated":{"line":1555,"column":23}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1523,"column":58},"generated":{"line":1555,"column":27}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1523,"column":58},"generated":{"line":1555,"column":29}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1524,"column":2},"generated":{"line":1556,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1524,"column":9},"generated":{"line":1556,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1524,"column":13},"generated":{"line":1556,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1524,"column":26},"generated":{"line":1556,"column":36}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1524,"column":27},"generated":{"line":1556,"column":37}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1524,"column":31},"generated":{"line":1556,"column":41}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1524,"column":32},"generated":{"line":1556,"column":42}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1525,"column":0},"generated":{"line":1557,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1527,"column":0},"generated":{"line":1558,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1573,"column":6},"generated":{"line":1604,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1573,"column":16},"generated":{"line":1604,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1573,"column":31},"generated":{"line":1604,"column":24}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1573,"column":32},"generated":{"line":1604,"column":25}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1573,"column":54},"generated":{"line":1604,"column":29}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1573,"column":54},"generated":{"line":1604,"column":31}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1574,"column":2},"generated":{"line":1605,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1574,"column":9},"generated":{"line":1605,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1574,"column":13},"generated":{"line":1605,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1574,"column":28},"generated":{"line":1605,"column":38}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1574,"column":29},"generated":{"line":1605,"column":39}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1574,"column":33},"generated":{"line":1605,"column":43}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1574,"column":34},"generated":{"line":1605,"column":44}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1575,"column":0},"generated":{"line":1606,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1577,"column":0},"generated":{"line":1607,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1578,"column":7},"generated":{"line":1608,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1578,"column":13},"generated":{"line":1608,"column":6}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1578,"column":28},"generated":{"line":1608,"column":21}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1578,"column":28},"generated":{"line":1608,"column":24}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1578,"column":28},"generated":{"line":1608,"column":31}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1578,"column":28},"generated":{"line":1608,"column":32}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1578,"column":28},"generated":{"line":1608,"column":47}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1578,"column":31},"generated":{"line":1608,"column":50}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1578,"column":49},"generated":{"line":1608,"column":68}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1579,"column":7},"generated":{"line":1609,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1579,"column":13},"generated":{"line":1609,"column":6}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1579,"column":28},"generated":{"line":1609,"column":21}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1579,"column":28},"generated":{"line":1609,"column":24}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1579,"column":28},"generated":{"line":1609,"column":31}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1579,"column":28},"generated":{"line":1609,"column":32}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1579,"column":28},"generated":{"line":1609,"column":47}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1579,"column":31},"generated":{"line":1609,"column":50}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1579,"column":49},"generated":{"line":1609,"column":68}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1580,"column":7},"generated":{"line":1610,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1580,"column":13},"generated":{"line":1610,"column":6}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1580,"column":22},"generated":{"line":1610,"column":15}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1580,"column":22},"generated":{"line":1610,"column":18}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1580,"column":22},"generated":{"line":1610,"column":25}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1580,"column":22},"generated":{"line":1610,"column":26}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1580,"column":22},"generated":{"line":1610,"column":35}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1580,"column":25},"generated":{"line":1610,"column":38}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1580,"column":37},"generated":{"line":1610,"column":50}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1581,"column":7},"generated":{"line":1611,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1581,"column":13},"generated":{"line":1611,"column":6}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1581,"column":22},"generated":{"line":1611,"column":15}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1581,"column":22},"generated":{"line":1611,"column":18}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1581,"column":22},"generated":{"line":1611,"column":25}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1581,"column":22},"generated":{"line":1611,"column":26}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1581,"column":22},"generated":{"line":1611,"column":35}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1581,"column":25},"generated":{"line":1611,"column":38}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1581,"column":37},"generated":{"line":1611,"column":50}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1585,"column":0},"generated":{"line":1612,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1608,"column":6},"generated":{"line":1635,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1608,"column":16},"generated":{"line":1635,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1608,"column":29},"generated":{"line":1635,"column":22}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1608,"column":30},"generated":{"line":1635,"column":23}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1608,"column":53},"generated":{"line":1635,"column":27}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1608,"column":53},"generated":{"line":1635,"column":29}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1609,"column":2},"generated":{"line":1636,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1609,"column":9},"generated":{"line":1636,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1609,"column":13},"generated":{"line":1636,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1609,"column":26},"generated":{"line":1636,"column":33}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1609,"column":27},"generated":{"line":1636,"column":34}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1609,"column":31},"generated":{"line":1636,"column":38}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1609,"column":32},"generated":{"line":1636,"column":39}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1610,"column":0},"generated":{"line":1637,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1612,"column":0},"generated":{"line":1638,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1636,"column":6},"generated":{"line":1662,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1636,"column":16},"generated":{"line":1662,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1636,"column":31},"generated":{"line":1662,"column":24}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1636,"column":32},"generated":{"line":1662,"column":25}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1636,"column":57},"generated":{"line":1662,"column":29}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1636,"column":57},"generated":{"line":1662,"column":31}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1637,"column":2},"generated":{"line":1663,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1637,"column":9},"generated":{"line":1663,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1637,"column":13},"generated":{"line":1663,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1637,"column":28},"generated":{"line":1663,"column":35}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1637,"column":29},"generated":{"line":1663,"column":36}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1637,"column":33},"generated":{"line":1663,"column":40}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1637,"column":34},"generated":{"line":1663,"column":41}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1638,"column":0},"generated":{"line":1664,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1640,"column":0},"generated":{"line":1665,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1671,"column":6},"generated":{"line":1696,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1671,"column":16},"generated":{"line":1696,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1671,"column":28},"generated":{"line":1696,"column":21}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1671,"column":29},"generated":{"line":1696,"column":22}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1671,"column":51},"generated":{"line":1696,"column":26}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1671,"column":51},"generated":{"line":1696,"column":28}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1672,"column":2},"generated":{"line":1697,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1672,"column":9},"generated":{"line":1697,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1672,"column":13},"generated":{"line":1697,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1672,"column":25},"generated":{"line":1697,"column":32}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1672,"column":26},"generated":{"line":1697,"column":33}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1672,"column":30},"generated":{"line":1697,"column":37}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1672,"column":31},"generated":{"line":1697,"column":38}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1673,"column":0},"generated":{"line":1698,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1675,"column":0},"generated":{"line":1699,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1698,"column":6},"generated":{"line":1722,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1698,"column":16},"generated":{"line":1722,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1698,"column":23},"generated":{"line":1722,"column":16}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1698,"column":24},"generated":{"line":1722,"column":17}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1698,"column":42},"generated":{"line":1722,"column":21}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1698,"column":42},"generated":{"line":1722,"column":23}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1699,"column":2},"generated":{"line":1723,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1699,"column":9},"generated":{"line":1723,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1699,"column":13},"generated":{"line":1723,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1699,"column":20},"generated":{"line":1723,"column":26}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1699,"column":21},"generated":{"line":1723,"column":27}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1699,"column":25},"generated":{"line":1723,"column":31}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1699,"column":26},"generated":{"line":1723,"column":32}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1700,"column":0},"generated":{"line":1724,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1702,"column":0},"generated":{"line":1725,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1729,"column":6},"generated":{"line":1752,"column":0}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1729,"column":16},"generated":{"line":1752,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1729,"column":25},"generated":{"line":1752,"column":18}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1729,"column":26},"generated":{"line":1752,"column":19}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1729,"column":46},"generated":{"line":1752,"column":23}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1729,"column":46},"generated":{"line":1752,"column":25}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1730,"column":2},"generated":{"line":1753,"column":2}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1730,"column":9},"generated":{"line":1753,"column":9}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1730,"column":13},"generated":{"line":1753,"column":13}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1730,"column":22},"generated":{"line":1753,"column":43}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1730,"column":23},"generated":{"line":1753,"column":44}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1730,"column":27},"generated":{"line":1753,"column":48}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1730,"column":28},"generated":{"line":1753,"column":49}},{"source":"../../../../../tfjs-layers/src/exports_layers.ts","name":null,"original":{"line":1731,"column":0},"generated":{"line":1754,"column":0}}],"sources":{"../../../../../tfjs-layers/src/exports_layers.ts":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {InputLayer, InputLayerArgs} from './engine/input_layer';\nimport {Layer, LayerArgs} from './engine/topology';\nimport {input} from './exports';\nimport {ELU, ELULayerArgs, LeakyReLU, LeakyReLULayerArgs, PReLU, PReLULayerArgs, ReLU, ReLULayerArgs, Softmax, SoftmaxLayerArgs, ThresholdedReLU, ThresholdedReLULayerArgs} from './layers/advanced_activations';\nimport {Conv1D, Conv2D, Conv2DTranspose, Conv3D, ConvLayerArgs, Cropping2D, Cropping2DLayerArgs, SeparableConv2D, SeparableConvLayerArgs, UpSampling2D, UpSampling2DLayerArgs, Conv3DTranspose} from './layers/convolutional';\nimport {DepthwiseConv2D, DepthwiseConv2DLayerArgs} from './layers/convolutional_depthwise';\nimport {ConvLSTM2D, ConvLSTM2DArgs, ConvLSTM2DCell, ConvLSTM2DCellArgs} from './layers/convolutional_recurrent';\nimport {Activation, ActivationLayerArgs, Dense, DenseLayerArgs, Dropout, DropoutLayerArgs, Flatten, FlattenLayerArgs, Masking, MaskingArgs, Permute, PermuteLayerArgs, RepeatVector, RepeatVectorLayerArgs, Reshape, ReshapeLayerArgs, SpatialDropout1D, SpatialDropout1DLayerConfig} from './layers/core';\nimport {Embedding, EmbeddingLayerArgs} from './layers/embeddings';\nimport {Add, Average, Concatenate, ConcatenateLayerArgs, Dot, DotLayerArgs, Maximum, Minimum, Multiply} from './layers/merge';\nimport {AlphaDropout, AlphaDropoutArgs, GaussianDropout, GaussianDropoutArgs, GaussianNoise, GaussianNoiseArgs} from './layers/noise';\nimport {BatchNormalization, BatchNormalizationLayerArgs, LayerNormalization, LayerNormalizationLayerArgs} from './layers/normalization';\nimport {ZeroPadding2D, ZeroPadding2DLayerArgs} from './layers/padding';\nimport {AveragePooling1D, AveragePooling2D, AveragePooling3D, GlobalAveragePooling1D, GlobalAveragePooling2D, GlobalMaxPooling1D, GlobalMaxPooling2D, GlobalPooling2DLayerArgs, MaxPooling1D, MaxPooling2D, MaxPooling3D, Pooling1DLayerArgs, Pooling2DLayerArgs, Pooling3DLayerArgs} from './layers/pooling';\nimport {GRU, GRUCell, GRUCellLayerArgs, GRULayerArgs, LSTM, LSTMCell, LSTMCellLayerArgs, LSTMLayerArgs, RNN, RNNCell, RNNLayerArgs, SimpleRNN, SimpleRNNCell, SimpleRNNCellLayerArgs, SimpleRNNLayerArgs, StackedRNNCells, StackedRNNCellsArgs} from './layers/recurrent';\nimport {Bidirectional, BidirectionalLayerArgs, TimeDistributed, WrapperLayerArgs} from './layers/wrappers';\nimport { Rescaling, RescalingArgs } from './layers/preprocessing/image_preprocessing';\n\n// TODO(cais): Add doc string to all the public static functions in this\n//   class; include exectuable JavaScript code snippets where applicable\n//   (b/74074458).\n\n// Input Layer.\n/**\n * An input layer is an entry point into a `tf.LayersModel`.\n *\n * `InputLayer` is generated automatically for `tf.Sequential` models by\n * specifying the `inputshape` or `batchInputShape` for the first layer.  It\n * should not be specified explicitly. However, it can be useful sometimes,\n * e.g., when constructing a sequential model from a subset of another\n * sequential model's layers. Like the code snippet below shows.\n *\n * ```js\n * // Define a model which simply adds two inputs.\n * const model1 = tf.sequential();\n * model1.add(tf.layers.dense({inputShape: [4], units: 3, activation: 'relu'}));\n * model1.add(tf.layers.dense({units: 1, activation: 'sigmoid'}));\n * model1.summary();\n * model1.predict(tf.zeros([1, 4])).print();\n *\n * // Construct another model, reusing the second layer of `model1` while\n * // not using the first layer of `model1`. Note that you cannot add the second\n * // layer of `model` directly as the first layer of the new sequential model,\n * // because doing so will lead to an error related to the fact that the layer\n * // is not an input layer. Instead, you need to create an `inputLayer` and add\n * // it to the new sequential model before adding the reused layer.\n * const model2 = tf.sequential();\n * // Use an inputShape that matches the input shape of `model1`'s second\n * // layer.\n * model2.add(tf.layers.inputLayer({inputShape: [3]}));\n * model2.add(model1.layers[1]);\n * model2.summary();\n * model2.predict(tf.zeros([1, 3])).print();\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Inputs', namespace: 'layers'}\n */\nexport function inputLayer(args: InputLayerArgs) {\n  return new InputLayer(args);\n}\n\n// Advanced Activation Layers.\n\n/**\n * Exponential Linear Unit (ELU).\n *\n * It follows:\n * `f(x) =  alpha * (exp(x) - 1.) for x < 0`,\n * `f(x) = x for x >= 0`.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * References:\n *   - [Fast and Accurate Deep Network Learning by Exponential Linear Units\n * (ELUs)](https://arxiv.org/abs/1511.07289v1)\n *\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function elu(args?: ELULayerArgs) {\n  return new ELU(args);\n}\n\n/**\n * Rectified Linear Unit activation function.\n *\n * Input shape:\n *   Arbitrary. Use the config field `inputShape` (Array of integers, does\n *   not include the sample axis) when using this layer as the first layer\n *   in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function reLU(args?: ReLULayerArgs) {\n  return new ReLU(args);\n}\n\n/**\n * Leaky version of a rectified linear unit.\n *\n * It allows a small gradient when the unit is not active:\n * `f(x) = alpha * x for x < 0.`\n * `f(x) = x for x >= 0.`\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function leakyReLU(args?: LeakyReLULayerArgs) {\n  return new LeakyReLU(args);\n}\n\n/**\n * Parameterized version of a leaky rectified linear unit.\n *\n * It follows\n * `f(x) = alpha * x for x < 0.`\n * `f(x) = x for x >= 0.`\n * wherein `alpha` is a trainable weight.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function prelu(args?: PReLULayerArgs) {\n  return new PReLU(args);\n}\n\n/**\n * Softmax activation layer.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function softmax(args?: SoftmaxLayerArgs) {\n  return new Softmax(args);\n}\n\n/**\n * Thresholded Rectified Linear Unit.\n *\n * It follows:\n * `f(x) = x for x > theta`,\n * `f(x) = 0 otherwise`.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * References:\n *   - [Zero-Bias Autoencoders and the Benefits of Co-Adapting\n * Features](http://arxiv.org/abs/1402.3337)\n *\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function thresholdedReLU(args?: ThresholdedReLULayerArgs) {\n  return new ThresholdedReLU(args);\n}\n\n// Convolutional Layers.\n\n/**\n * 1D convolution layer (e.g., temporal convolution).\n *\n * This layer creates a convolution kernel that is convolved\n * with the layer input over a single spatial (or temporal) dimension\n * to produce a tensor of outputs.\n *\n * If `use_bias` is True, a bias vector is created and added to the outputs.\n *\n * If `activation` is not `null`, it is applied to the outputs as well.\n *\n * When using this layer as the first layer in a model, provide an\n * `inputShape` argument `Array` or `null`.\n *\n * For example, `inputShape` would be:\n * - `[10, 128]` for sequences of 10 vectors of 128-dimensional vectors\n * - `[null, 128]` for variable-length sequences of 128-dimensional vectors.\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional',  namespace: 'layers'}\n */\nexport function conv1d(args: ConvLayerArgs) {\n  return new Conv1D(args);\n}\n\n/**\n * 2D convolution layer (e.g. spatial convolution over images).\n *\n * This layer creates a convolution kernel that is convolved\n * with the layer input to produce a tensor of outputs.\n *\n * If `useBias` is True, a bias vector is created and added to the outputs.\n *\n * If `activation` is not `null`, it is applied to the outputs as well.\n *\n * When using this layer as the first layer in a model,\n * provide the keyword argument `inputShape`\n * (Array of integers, does not include the sample axis),\n * e.g. `inputShape=[128, 128, 3]` for 128x128 RGB pictures\n * in `dataFormat='channelsLast'`.\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function conv2d(args: ConvLayerArgs) {\n  return new Conv2D(args);\n}\n\n/**\n * Transposed convolutional layer (sometimes called Deconvolution).\n *\n * The need for transposed convolutions generally arises\n * from the desire to use a transformation going in the opposite direction of\n * a normal convolution, i.e., from something that has the shape of the output\n * of some convolution to something that has the shape of its input while\n * maintaining a connectivity pattern that is compatible with said\n * convolution.\n *\n * When using this layer as the first layer in a model, provide the\n * configuration `inputShape` (`Array` of integers, does not include the\n * sample axis), e.g., `inputShape: [128, 128, 3]` for 128x128 RGB pictures in\n * `dataFormat: 'channelsLast'`.\n *\n * Input shape:\n *   4D tensor with shape:\n *   `[batch, channels, rows, cols]` if `dataFormat` is `'channelsFirst'`.\n *   or 4D tensor with shape\n *   `[batch, rows, cols, channels]` if `dataFormat` is `'channelsLast'`.\n *\n * Output shape:\n *   4D tensor with shape:\n *   `[batch, filters, newRows, newCols]` if `dataFormat` is\n * `'channelsFirst'`. or 4D tensor with shape:\n *   `[batch, newRows, newCols, filters]` if `dataFormat` is `'channelsLast'`.\n *\n * References:\n *   - [A guide to convolution arithmetic for deep\n * learning](https://arxiv.org/abs/1603.07285v1)\n *   - [Deconvolutional\n * Networks](http://www.matthewzeiler.com/pubs/cvpr2010/cvpr2010.pdf)\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function conv2dTranspose(args: ConvLayerArgs) {\n  return new Conv2DTranspose(args);\n}\n\n/**\n * 3D convolution layer (e.g. spatial convolution over volumes).\n *\n * This layer creates a convolution kernel that is convolved\n * with the layer input to produce a tensor of outputs.\n *\n * If `useBias` is True, a bias vector is created and added to the outputs.\n *\n * If `activation` is not `null`, it is applied to the outputs as well.\n *\n * When using this layer as the first layer in a model,\n * provide the keyword argument `inputShape`\n * (Array of integers, does not include the sample axis),\n * e.g. `inputShape=[128, 128, 128, 1]` for 128x128x128 grayscale volumes\n * in `dataFormat='channelsLast'`.\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function conv3d(args: ConvLayerArgs) {\n  return new Conv3D(args);\n}\n\nexport function conv3dTranspose(args: ConvLayerArgs): Layer {\n  return new Conv3DTranspose(args);\n}\n\n/**\n * Depthwise separable 2D convolution.\n *\n * Separable convolution consists of first performing\n * a depthwise spatial convolution\n * (which acts on each input channel separately)\n * followed by a pointwise convolution which mixes together the resulting\n * output channels. The `depthMultiplier` argument controls how many\n * output channels are generated per input channel in the depthwise step.\n *\n * Intuitively, separable convolutions can be understood as\n * a way to factorize a convolution kernel into two smaller kernels,\n * or as an extreme version of an Inception block.\n *\n * Input shape:\n *   4D tensor with shape:\n *     `[batch, channels, rows, cols]` if data_format='channelsFirst'\n *   or 4D tensor with shape:\n *     `[batch, rows, cols, channels]` if data_format='channelsLast'.\n *\n * Output shape:\n *   4D tensor with shape:\n *     `[batch, filters, newRows, newCols]` if data_format='channelsFirst'\n *   or 4D tensor with shape:\n *     `[batch, newRows, newCols, filters]` if data_format='channelsLast'.\n *     `rows` and `cols` values might have changed due to padding.\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function separableConv2d(args: SeparableConvLayerArgs) {\n  return new SeparableConv2D(args);\n}\n\n/**\n * Cropping layer for 2D input (e.g., image).\n *\n * This layer can crop an input\n * at the top, bottom, left and right side of an image tensor.\n *\n * Input shape:\n *   4D tensor with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, rows, cols, channels]`\n *   - If `data_format` is `\"channels_first\"`:\n *     `[batch, channels, rows, cols]`.\n *\n * Output shape:\n *   4D with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, croppedRows, croppedCols, channels]`\n *    - If `dataFormat` is `\"channelsFirst\"`:\n *     `[batch, channels, croppedRows, croppedCols]`.\n *\n * Examples\n * ```js\n *\n * const model = tf.sequential();\n * model.add(tf.layers.cropping2D({cropping:[[2, 2], [2, 2]],\n *                                inputShape: [128, 128, 3]}));\n * //now output shape is [batch, 124, 124, 3]\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function cropping2D(args: Cropping2DLayerArgs) {\n  return new Cropping2D(args);\n}\n\n/**\n * Upsampling layer for 2D inputs.\n *\n * Repeats the rows and columns of the data\n * by size[0] and size[1] respectively.\n *\n *\n * Input shape:\n *    4D tensor with shape:\n *     - If `dataFormat` is `\"channelsLast\"`:\n *         `[batch, rows, cols, channels]`\n *     - If `dataFormat` is `\"channelsFirst\"`:\n *        `[batch, channels, rows, cols]`\n *\n * Output shape:\n *     4D tensor with shape:\n *     - If `dataFormat` is `\"channelsLast\"`:\n *        `[batch, upsampledRows, upsampledCols, channels]`\n *     - If `dataFormat` is `\"channelsFirst\"`:\n *         `[batch, channels, upsampledRows, upsampledCols]`\n *\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function upSampling2d(args: UpSampling2DLayerArgs) {\n  return new UpSampling2D(args);\n}\n\n// Convolutional(depthwise) Layers.\n\n/**\n * Depthwise separable 2D convolution.\n *\n * Depthwise Separable convolutions consists in performing just the first step\n * in a depthwise spatial convolution (which acts on each input channel\n * separately). The `depthMultiplier` argument controls how many output channels\n * are generated per input channel in the depthwise step.\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function depthwiseConv2d(args: DepthwiseConv2DLayerArgs) {\n  return new DepthwiseConv2D(args);\n}\n\n// Basic Layers.\n\n/**\n * Applies an activation function to an output.\n *\n * This layer applies element-wise activation function.  Other layers, notably\n * `dense` can also apply activation functions.  Use this isolated activation\n * function to extract the values before and after the\n * activation. For instance:\n *\n * ```js\n * const input = tf.input({shape: [5]});\n * const denseLayer = tf.layers.dense({units: 1});\n * const activationLayer = tf.layers.activation({activation: 'relu6'});\n *\n * // Obtain the output symbolic tensors by applying the layers in order.\n * const denseOutput = denseLayer.apply(input);\n * const activationOutput = activationLayer.apply(denseOutput);\n *\n * // Create the model based on the inputs.\n * const model = tf.model({\n *     inputs: input,\n *     outputs: [denseOutput, activationOutput]\n * });\n *\n * // Collect both outputs and print separately.\n * const [denseOut, activationOut] = model.predict(tf.randomNormal([6, 5]));\n * denseOut.print();\n * activationOut.print();\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nexport function activation(args: ActivationLayerArgs) {\n  return new Activation(args);\n}\n\n/**\n * Creates a dense (fully connected) layer.\n *\n * This layer implements the operation:\n *   `output = activation(dot(input, kernel) + bias)`\n *\n * `activation` is the element-wise activation function\n *   passed as the `activation` argument.\n *\n * `kernel` is a weights matrix created by the layer.\n *\n * `bias` is a bias vector created by the layer (only applicable if `useBias`\n * is `true`).\n *\n * **Input shape:**\n *\n *   nD `tf.Tensor` with shape: `(batchSize, ..., inputDim)`.\n *\n *   The most common situation would be\n *   a 2D input with shape `(batchSize, inputDim)`.\n *\n * **Output shape:**\n *\n *   nD tensor with shape: `(batchSize, ..., units)`.\n *\n *   For instance, for a 2D input with shape `(batchSize, inputDim)`,\n *   the output would have shape `(batchSize, units)`.\n *\n * Note: if the input to the layer has a rank greater than 2, then it is\n * flattened prior to the initial dot product with the kernel.\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nexport function dense(args: DenseLayerArgs) {\n  return new Dense(args);\n}\n\n/**\n * Applies\n * [dropout](http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf) to\n * the input.\n *\n * Dropout consists in randomly setting a fraction `rate` of input units to 0 at\n * each update during training time, which helps prevent overfitting.\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nexport function dropout(args: DropoutLayerArgs) {\n  return new Dropout(args);\n}\n\n/**\n * Spatial 1D version of Dropout.\n *\n * This Layer type performs the same function as the Dropout layer, but it drops\n * entire 1D feature maps instead of individual elements. For example, if an\n * input example consists of 3 timesteps and the feature map for each timestep\n * has a size of 4, a `spatialDropout1d` layer may zero out the feature maps\n * of the 1st timesteps and 2nd timesteps completely while sparing all feature\n * elements of the 3rd timestep.\n *\n * If adjacent frames (timesteps) are strongly correlated (as is normally the\n * case in early convolution layers), regular dropout will not regularize the\n * activation and will otherwise just result in merely an effective learning\n * rate decrease. In this case, `spatialDropout1d` will help promote\n * independence among feature maps and should be used instead.\n *\n * **Arguments:**\n *   rate: A floating-point number >=0 and <=1. Fraction of the input elements\n *     to drop.\n *\n * **Input shape:**\n *   3D tensor with shape `(samples, timesteps, channels)`.\n *\n * **Output shape:**\n *   Same as the input shape.\n *\n * References:\n *   - [Efficient Object Localization Using Convolutional\n *      Networks](https://arxiv.org/abs/1411.4280)\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nexport function spatialDropout1d(args: SpatialDropout1DLayerConfig) {\n  return new SpatialDropout1D(args);\n}\n\n/**\n * Flattens the input. Does not affect the batch size.\n *\n * A `Flatten` layer flattens each batch in its inputs to 1D (making the output\n * 2D).\n *\n * For example:\n *\n * ```js\n * const input = tf.input({shape: [4, 3]});\n * const flattenLayer = tf.layers.flatten();\n * // Inspect the inferred output shape of the flatten layer, which\n * // equals `[null, 12]`. The 2nd dimension is 4 * 3, i.e., the result of the\n * // flattening. (The 1st dimension is the undermined batch size.)\n * console.log(JSON.stringify(flattenLayer.apply(input).shape));\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nexport function flatten(args?: FlattenLayerArgs) {\n  return new Flatten(args);\n}\n\n/**\n * Repeats the input n times in a new dimension.\n *\n * ```js\n *  const model = tf.sequential();\n *  model.add(tf.layers.repeatVector({n: 4, inputShape: [2]}));\n *  const x = tf.tensor2d([[10, 20]]);\n *  // Use the model to do inference on a data point the model hasn't see\n *  model.predict(x).print();\n *  // output shape is now [batch, 2, 4]\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nexport function repeatVector(args: RepeatVectorLayerArgs) {\n  return new RepeatVector(args);\n}\n\n/**\n * Reshapes an input to a certain shape.\n *\n * ```js\n * const input = tf.input({shape: [4, 3]});\n * const reshapeLayer = tf.layers.reshape({targetShape: [2, 6]});\n * // Inspect the inferred output shape of the Reshape layer, which\n * // equals `[null, 2, 6]`. (The 1st dimension is the undermined batch size.)\n * console.log(JSON.stringify(reshapeLayer.apply(input).shape));\n * ```\n *\n * Input shape:\n *   Arbitrary, although all dimensions in the input shape must be fixed.\n *   Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n *\n * Output shape:\n *   [batchSize, targetShape[0], targetShape[1], ...,\n *    targetShape[targetShape.length - 1]].\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nexport function reshape(args: ReshapeLayerArgs) {\n  return new Reshape(args);\n}\n\n/**\n * Permutes the dimensions of the input according to a given pattern.\n *\n * Useful for, e.g., connecting RNNs and convnets together.\n *\n * Example:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.permute({\n *   dims: [2, 1],\n *   inputShape: [10, 64]\n * }));\n * console.log(model.outputShape);\n * // Now model's output shape is [null, 64, 10], where null is the\n * // unpermuted sample (batch) dimension.\n * ```\n *\n * Input shape:\n *   Arbitrary. Use the configuration field `inputShape` when using this\n *   layer as the first layer in a model.\n *\n * Output shape:\n *   Same rank as the input shape, but with the dimensions re-ordered (i.e.,\n *   permuted) according to the `dims` configuration of this layer.\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nexport function permute(args: PermuteLayerArgs) {\n  return new Permute(args);\n}\n\n/**\n * Maps positive integers (indices) into dense vectors of fixed size.\n * E.g. [[4], [20]] -> [[0.25, 0.1], [0.6, -0.2]]\n *\n * **Input shape:** 2D tensor with shape: `[batchSize, sequenceLength]`.\n *\n * **Output shape:** 3D tensor with shape: `[batchSize, sequenceLength,\n * outputDim]`.\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nexport function embedding(args: EmbeddingLayerArgs) {\n  return new Embedding(args);\n}\n\n// Merge Layers.\n\n/**\n * Layer that performs element-wise addition on an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape, and returns a\n * single tensor (also of the same shape). The inputs are specified as an\n * `Array` when the `apply` method of the `Add` layer instance is called. For\n * example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const addLayer = tf.layers.add();\n * const sum = addLayer.apply([input1, input2]);\n * console.log(JSON.stringify(sum.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}\n */\nexport function add(args?: LayerArgs) {\n  return new Add(args);\n}\n\n/**\n * Layer that performs element-wise averaging on an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape, and returns a\n * single tensor (also of the same shape). For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const averageLayer = tf.layers.average();\n * const average = averageLayer.apply([input1, input2]);\n * console.log(JSON.stringify(average.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}\n */\nexport function average(args?: LayerArgs) {\n  return new Average(args);\n}\n\n/**\n * Layer that concatenates an `Array` of inputs.\n *\n * It takes a list of tensors, all of the same shape except for the\n * concatenation axis, and returns a single tensor, the concatenation\n * of all inputs. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 3]});\n * const concatLayer = tf.layers.concatenate();\n * const output = concatLayer.apply([input1, input2]);\n * console.log(JSON.stringify(output.shape));\n * // You get [null, 2, 5], with the first dimension as the undetermined batch\n * // dimension. The last dimension (5) is the result of concatenating the\n * // last dimensions of the inputs (2 and 3).\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}\n */\nexport function concatenate(args?: ConcatenateLayerArgs) {\n  return new Concatenate(args);\n}\n\n/**\n * Layer that computes the element-wise maximum of an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape, and returns a\n * single tensor (also of the same shape). For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const maxLayer = tf.layers.maximum();\n * const max = maxLayer.apply([input1, input2]);\n * console.log(JSON.stringify(max.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}\n */\nexport function maximum(args?: LayerArgs) {\n  return new Maximum(args);\n}\n\n/**\n * Layer that computes the element-wise minimum of an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape, and returns a\n * single tensor (also of the same shape). For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const minLayer = tf.layers.minimum();\n * const min = minLayer.apply([input1, input2]);\n * console.log(JSON.stringify(min.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}\n */\nexport function minimum(args?: LayerArgs) {\n  return new Minimum(args);\n}\n\n/**\n * Layer that multiplies (element-wise) an `Array` of inputs.\n *\n * It takes as input an Array of tensors, all of the same\n * shape, and returns a single tensor (also of the same shape).\n * For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const input3 = tf.input({shape: [2, 2]});\n * const multiplyLayer = tf.layers.multiply();\n * const product = multiplyLayer.apply([input1, input2, input3]);\n * console.log(product.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n *\n * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}\n */\nexport function multiply(args?: LayerArgs) {\n  return new Multiply(args);\n}\n\n/**\n * Layer that computes a dot product between samples in two tensors.\n *\n * E.g., if applied to a list of two tensors `a` and `b` both of shape\n * `[batchSize, n]`, the output will be a tensor of shape `[batchSize, 1]`,\n * where each entry at index `[i, 0]` will be the dot product between\n * `a[i, :]` and `b[i, :]`.\n *\n * Example:\n *\n * ```js\n * const dotLayer = tf.layers.dot({axes: -1});\n * const x1 = tf.tensor2d([[10, 20], [30, 40]]);\n * const x2 = tf.tensor2d([[-1, -2], [-3, -4]]);\n *\n * // Invoke the layer's apply() method in eager (imperative) mode.\n * const y = dotLayer.apply([x1, x2]);\n * y.print();\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}\n */\nexport function dot(args: DotLayerArgs) {\n  return new Dot(args);\n}\n\n// Normalization Layers.\n\n/**\n * Batch normalization layer (Ioffe and Szegedy, 2014).\n *\n * Normalize the activations of the previous layer at each batch,\n * i.e. applies a transformation that maintains the mean activation\n * close to 0 and the activation standard deviation close to 1.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape` (Array of integers, does\n *   not include the sample axis) when calling the constructor of this class,\n *   if this layer is used as a first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * References:\n *   - [Batch Normalization: Accelerating Deep Network Training by Reducing\n * Internal Covariate Shift](https://arxiv.org/abs/1502.03167)\n *\n * @doc {heading: 'Layers', subheading: 'Normalization', namespace: 'layers'}\n */\nexport function batchNormalization(args?: BatchNormalizationLayerArgs) {\n  return new BatchNormalization(args);\n}\n\n/**\n * Layer-normalization layer (Ba et al., 2016).\n *\n * Normalizes the activations of the previous layer for each given example in a\n * batch independently, instead of across a batch like in `batchNormalization`.\n * In other words, this layer applies a transformation that maintains the mean\n * activation within each example close to 0 and activation variance close to 1.\n *\n * Input shape:\n *   Arbitrary. Use the argument `inputShape` when using this layer as the first\n *   layer in a model.\n *\n * Output shape:\n *   Same as input.\n *\n * References:\n *   - [Layer Normalization](https://arxiv.org/abs/1607.06450)\n *\n * @doc {heading: 'Layers', subheading: 'Normalization', namespace: 'layers'}\n */\nexport function layerNormalization(args?: LayerNormalizationLayerArgs) {\n  return new LayerNormalization(args);\n}\n\n// Padding Layers.\n\n/**\n * Zero-padding layer for 2D input (e.g., image).\n *\n * This layer can add rows and columns of zeros\n * at the top, bottom, left and right side of an image tensor.\n *\n * Input shape:\n *   4D tensor with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, rows, cols, channels]`\n *   - If `data_format` is `\"channels_first\"`:\n *     `[batch, channels, rows, cols]`.\n *\n * Output shape:\n *   4D with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, paddedRows, paddedCols, channels]`\n *    - If `dataFormat` is `\"channelsFirst\"`:\n *     `[batch, channels, paddedRows, paddedCols]`.\n *\n * @doc {heading: 'Layers', subheading: 'Padding', namespace: 'layers'}\n */\nexport function zeroPadding2d(args?: ZeroPadding2DLayerArgs) {\n  return new ZeroPadding2D(args);\n}\n\n// Pooling Layers.\n\n/**\n * Average pooling operation for spatial data.\n *\n * Input shape: `[batchSize, inLength, channels]`\n *\n * Output shape: `[batchSize, pooledLength, channels]`\n *\n * `tf.avgPool1d` is an alias.\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function averagePooling1d(args: Pooling1DLayerArgs) {\n  return new AveragePooling1D(args);\n}\nexport function avgPool1d(args: Pooling1DLayerArgs) {\n  return averagePooling1d(args);\n}\n// For backwards compatibility.\n// See https://github.com/tensorflow/tfjs/issues/152\nexport function avgPooling1d(args: Pooling1DLayerArgs) {\n  return averagePooling1d(args);\n}\n\n/**\n * Average pooling operation for spatial data.\n *\n * Input shape:\n *  - If `dataFormat === CHANNEL_LAST`:\n *      4D tensor with shape:\n *      `[batchSize, rows, cols, channels]`\n *  - If `dataFormat === CHANNEL_FIRST`:\n *      4D tensor with shape:\n *      `[batchSize, channels, rows, cols]`\n *\n * Output shape\n *  - If `dataFormat === CHANNEL_LAST`:\n *      4D tensor with shape:\n *      `[batchSize, pooledRows, pooledCols, channels]`\n *  - If `dataFormat === CHANNEL_FIRST`:\n *      4D tensor with shape:\n *      `[batchSize, channels, pooledRows, pooledCols]`\n *\n * `tf.avgPool2d` is an alias.\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function averagePooling2d(args: Pooling2DLayerArgs) {\n  return new AveragePooling2D(args);\n}\nexport function avgPool2d(args: Pooling2DLayerArgs) {\n  return averagePooling2d(args);\n}\n// For backwards compatibility.\n// See https://github.com/tensorflow/tfjs/issues/152\nexport function avgPooling2d(args: Pooling2DLayerArgs) {\n  return averagePooling2d(args);\n}\n\n/**\n * Average pooling operation for 3D data.\n *\n * Input shape\n *   - If `dataFormat === channelsLast`:\n *       5D tensor with shape:\n *       `[batchSize, depths, rows, cols, channels]`\n *   - If `dataFormat === channelsFirst`:\n *      4D tensor with shape:\n *       `[batchSize, channels, depths, rows, cols]`\n *\n * Output shape\n *   - If `dataFormat=channelsLast`:\n *       5D tensor with shape:\n *       `[batchSize, pooledDepths, pooledRows, pooledCols, channels]`\n *   - If `dataFormat=channelsFirst`:\n *       5D tensor with shape:\n *       `[batchSize, channels, pooledDepths, pooledRows, pooledCols]`\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function averagePooling3d(args: Pooling3DLayerArgs) {\n  return new AveragePooling3D(args);\n}\nexport function avgPool3d(args: Pooling3DLayerArgs) {\n  return averagePooling3d(args);\n}\n// For backwards compatibility.\n// See https://github.com/tensorflow/tfjs/issues/152\nexport function avgPooling3d(args: Pooling3DLayerArgs) {\n  return averagePooling3d(args);\n}\n\n/**\n * Global average pooling operation for temporal data.\n *\n * Input Shape: 3D tensor with shape: `[batchSize, steps, features]`.\n *\n * Output Shape: 2D tensor with shape: `[batchSize, features]`.\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function globalAveragePooling1d(args?: LayerArgs) {\n  return new GlobalAveragePooling1D(args);\n}\n\n/**\n * Global average pooling operation for spatial data.\n *\n * Input shape:\n *   - If `dataFormat` is `CHANNEL_LAST`:\n *       4D tensor with shape: `[batchSize, rows, cols, channels]`.\n *   - If `dataFormat` is `CHANNEL_FIRST`:\n *       4D tensor with shape: `[batchSize, channels, rows, cols]`.\n *\n * Output shape:\n *   2D tensor with shape: `[batchSize, channels]`.\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function globalAveragePooling2d(args: GlobalPooling2DLayerArgs) {\n  return new GlobalAveragePooling2D(args);\n}\n\n/**\n * Global max pooling operation for temporal data.\n *\n * Input Shape: 3D tensor with shape: `[batchSize, steps, features]`.\n *\n * Output Shape: 2D tensor with shape: `[batchSize, features]`.\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function globalMaxPooling1d(args?: LayerArgs) {\n  return new GlobalMaxPooling1D(args);\n}\n\n/**\n * Global max pooling operation for spatial data.\n *\n * Input shape:\n *   - If `dataFormat` is `CHANNEL_LAST`:\n *       4D tensor with shape: `[batchSize, rows, cols, channels]`.\n *   - If `dataFormat` is `CHANNEL_FIRST`:\n *       4D tensor with shape: `[batchSize, channels, rows, cols]`.\n *\n * Output shape:\n *   2D tensor with shape: `[batchSize, channels]`.\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function globalMaxPooling2d(args: GlobalPooling2DLayerArgs) {\n  return new GlobalMaxPooling2D(args);\n}\n\n/**\n * Max pooling operation for temporal data.\n *\n * Input shape:  `[batchSize, inLength, channels]`\n *\n * Output shape: `[batchSize, pooledLength, channels]`\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function maxPooling1d(args: Pooling1DLayerArgs) {\n  return new MaxPooling1D(args);\n}\n\n/**\n * Max pooling operation for spatial data.\n *\n * Input shape\n *   - If `dataFormat === CHANNEL_LAST`:\n *       4D tensor with shape:\n *       `[batchSize, rows, cols, channels]`\n *   - If `dataFormat === CHANNEL_FIRST`:\n *      4D tensor with shape:\n *       `[batchSize, channels, rows, cols]`\n *\n * Output shape\n *   - If `dataFormat=CHANNEL_LAST`:\n *       4D tensor with shape:\n *       `[batchSize, pooledRows, pooledCols, channels]`\n *   - If `dataFormat=CHANNEL_FIRST`:\n *       4D tensor with shape:\n *       `[batchSize, channels, pooledRows, pooledCols]`\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function maxPooling2d(args: Pooling2DLayerArgs) {\n  return new MaxPooling2D(args);\n}\n\n/**\n * Max pooling operation for 3D data.\n *\n * Input shape\n *   - If `dataFormat === channelsLast`:\n *       5D tensor with shape:\n *       `[batchSize, depths, rows, cols, channels]`\n *   - If `dataFormat === channelsFirst`:\n *      5D tensor with shape:\n *       `[batchSize, channels, depths, rows, cols]`\n *\n * Output shape\n *   - If `dataFormat=channelsLast`:\n *       5D tensor with shape:\n *       `[batchSize, pooledDepths, pooledRows, pooledCols, channels]`\n *   - If `dataFormat=channelsFirst`:\n *       5D tensor with shape:\n *       `[batchSize, channels, pooledDepths, pooledRows, pooledCols]`\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function maxPooling3d(args: Pooling3DLayerArgs) {\n  return new MaxPooling3D(args);\n}\n\n// Recurrent Layers.\n\n/**\n * Gated Recurrent Unit - Cho et al. 2014.\n *\n * This is an `RNN` layer consisting of one `GRUCell`. However, unlike\n * the underlying `GRUCell`, the `apply` method of `SimpleRNN` operates\n * on a sequence of inputs. The shape of the input (not including the first,\n * batch dimension) needs to be at least 2-D, with the first dimension being\n * time steps. For example:\n *\n * ```js\n * const rnn = tf.layers.gru({units: 8, returnSequences: true});\n *\n * // Create an input with 10 time steps.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the `GRUCell`'s number of units.\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nexport function gru(args: GRULayerArgs) {\n  return new GRU(args);\n}\n\n/**\n * Cell class for `GRU`.\n *\n * `GRUCell` is distinct from the `RNN` subclass `GRU` in that its\n * `apply` method takes the input data of only a single time step and returns\n * the cell's output at the time step, while `GRU` takes the input data\n * over a number of time steps. For example:\n *\n * ```js\n * const cell = tf.layers.gruCell({units: 2});\n * const input = tf.input({shape: [10]});\n * const output = cell.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10]: This is the cell's output at a single time step. The 1st\n * // dimension is the unknown batch size.\n * ```\n *\n * Instance(s) of `GRUCell` can be used to construct `RNN` layers. The\n * most typical use of this workflow is to combine a number of cells into a\n * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an\n * RNN. For example:\n *\n * ```js\n * const cells = [\n *   tf.layers.gruCell({units: 4}),\n *   tf.layers.gruCell({units: 8}),\n * ];\n * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});\n *\n * // Create an input with 10 time steps and a length-20 vector at each step.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the last `gruCell`'s number of units.\n * ```\n *\n * To create an `RNN` consisting of only *one* `GRUCell`, use the\n * `tf.layers.gru`.\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nexport function gruCell(args: GRUCellLayerArgs) {\n  return new GRUCell(args);\n}\n\n/**\n * Long-Short Term Memory layer - Hochreiter 1997.\n *\n * This is an `RNN` layer consisting of one `LSTMCell`. However, unlike\n * the underlying `LSTMCell`, the `apply` method of `LSTM` operates\n * on a sequence of inputs. The shape of the input (not including the first,\n * batch dimension) needs to be at least 2-D, with the first dimension being\n * time steps. For example:\n *\n * ```js\n * const lstm = tf.layers.lstm({units: 8, returnSequences: true});\n *\n * // Create an input with 10 time steps.\n * const input = tf.input({shape: [10, 20]});\n * const output = lstm.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the `LSTMCell`'s number of units.\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nexport function lstm(args: LSTMLayerArgs) {\n  return new LSTM(args);\n}\n\n/**\n * Cell class for `LSTM`.\n *\n * `LSTMCell` is distinct from the `RNN` subclass `LSTM` in that its\n * `apply` method takes the input data of only a single time step and returns\n * the cell's output at the time step, while `LSTM` takes the input data\n * over a number of time steps. For example:\n *\n * ```js\n * const cell = tf.layers.lstmCell({units: 2});\n * const input = tf.input({shape: [10]});\n * const output = cell.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10]: This is the cell's output at a single time step. The 1st\n * // dimension is the unknown batch size.\n * ```\n *\n * Instance(s) of `LSTMCell` can be used to construct `RNN` layers. The\n * most typical use of this workflow is to combine a number of cells into a\n * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an\n * RNN. For example:\n *\n * ```js\n * const cells = [\n *   tf.layers.lstmCell({units: 4}),\n *   tf.layers.lstmCell({units: 8}),\n * ];\n * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});\n *\n * // Create an input with 10 time steps and a length-20 vector at each step.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the last `lstmCell`'s number of units.\n * ```\n *\n * To create an `RNN` consisting of only *one* `LSTMCell`, use the\n * `tf.layers.lstm`.\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nexport function lstmCell(args: LSTMCellLayerArgs) {\n  return new LSTMCell(args);\n}\n\n/**\n * Fully-connected RNN where the output is to be fed back to input.\n *\n * This is an `RNN` layer consisting of one `SimpleRNNCell`. However, unlike\n * the underlying `SimpleRNNCell`, the `apply` method of `SimpleRNN` operates\n * on a sequence of inputs. The shape of the input (not including the first,\n * batch dimension) needs to be at least 2-D, with the first dimension being\n * time steps. For example:\n *\n * ```js\n * const rnn = tf.layers.simpleRNN({units: 8, returnSequences: true});\n *\n * // Create an input with 10 time steps.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the `SimpleRNNCell`'s number of units.\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nexport function simpleRNN(args: SimpleRNNLayerArgs) {\n  return new SimpleRNN(args);\n}\n\n/**\n * Cell class for `SimpleRNN`.\n *\n * `SimpleRNNCell` is distinct from the `RNN` subclass `SimpleRNN` in that its\n * `apply` method takes the input data of only a single time step and returns\n * the cell's output at the time step, while `SimpleRNN` takes the input data\n * over a number of time steps. For example:\n *\n * ```js\n * const cell = tf.layers.simpleRNNCell({units: 2});\n * const input = tf.input({shape: [10]});\n * const output = cell.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10]: This is the cell's output at a single time step. The 1st\n * // dimension is the unknown batch size.\n * ```\n *\n * Instance(s) of `SimpleRNNCell` can be used to construct `RNN` layers. The\n * most typical use of this workflow is to combine a number of cells into a\n * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an\n * RNN. For example:\n *\n * ```js\n * const cells = [\n *   tf.layers.simpleRNNCell({units: 4}),\n *   tf.layers.simpleRNNCell({units: 8}),\n * ];\n * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});\n *\n * // Create an input with 10 time steps and a length-20 vector at each step.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the last `SimpleRNNCell`'s number of units.\n * ```\n *\n * To create an `RNN` consisting of only *one* `SimpleRNNCell`, use the\n * `tf.layers.simpleRNN`.\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nexport function simpleRNNCell(args: SimpleRNNCellLayerArgs) {\n  return new SimpleRNNCell(args);\n}\n\n/**\n * Convolutional LSTM layer - Xingjian Shi 2015.\n *\n * This is a `ConvRNN2D` layer consisting of one `ConvLSTM2DCell`. However,\n * unlike the underlying `ConvLSTM2DCell`, the `apply` method of `ConvLSTM2D`\n * operates on a sequence of inputs. The shape of the input (not including the\n * first, batch dimension) needs to be 4-D, with the first dimension being time\n * steps. For example:\n *\n * ```js\n * const filters = 3;\n * const kernelSize = 3;\n *\n * const batchSize = 4;\n * const sequenceLength = 2;\n * const size = 5;\n * const channels = 3;\n *\n * const inputShape = [batchSize, sequenceLength, size, size, channels];\n * const input = tf.ones(inputShape);\n *\n * const layer = tf.layers.convLstm2d({filters, kernelSize});\n *\n * const output = layer.apply(input);\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\nexport function convLstm2d(args: ConvLSTM2DArgs) {\n  return new ConvLSTM2D(args);\n}\n\n/**\n * Cell class for `ConvLSTM2D`.\n *\n * `ConvLSTM2DCell` is distinct from the `ConvRNN2D` subclass `ConvLSTM2D` in\n * that its `call` method takes the input data of only a single time step and\n * returns the cell's output at the time step, while `ConvLSTM2D` takes the\n * input data over a number of time steps. For example:\n *\n * ```js\n * const filters = 3;\n * const kernelSize = 3;\n *\n * const sequenceLength = 1;\n * const size = 5;\n * const channels = 3;\n *\n * const inputShape = [sequenceLength, size, size, channels];\n * const input = tf.ones(inputShape);\n *\n * const cell = tf.layers.convLstm2dCell({filters, kernelSize});\n *\n * cell.build(input.shape);\n *\n * const outputSize = size - kernelSize + 1;\n * const outShape = [sequenceLength, outputSize, outputSize, filters];\n *\n * const initialH = tf.zeros(outShape);\n * const initialC = tf.zeros(outShape);\n *\n * const [o, h, c] = cell.call([input, initialH, initialC], {});\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\nexport function convLstm2dCell(args: ConvLSTM2DCellArgs) {\n  return new ConvLSTM2DCell(args);\n}\n\n/**\n * Base class for recurrent layers.\n *\n * Input shape:\n *   3D tensor with shape `[batchSize, timeSteps, inputDim]`.\n *\n * Output shape:\n *   - if `returnState`, an Array of tensors (i.e., `tf.Tensor`s). The first\n *     tensor is the output. The remaining tensors are the states at the\n *     last time step, each with shape `[batchSize, units]`.\n *   - if `returnSequences`, the output will have shape\n *     `[batchSize, timeSteps, units]`.\n *   - else, the output will have shape `[batchSize, units]`.\n *\n * Masking:\n *   This layer supports masking for input data with a variable number\n *   of timesteps. To introduce masks to your data,\n *   use an embedding layer with the `mask_zero` parameter\n *   set to `True`.\n *\n * Notes on using statefulness in RNNs:\n *   You can set RNN layers to be 'stateful', which means that the states\n *   computed for the samples in one batch will be reused as initial states\n *   for the samples in the next batch. This assumes a one-to-one mapping\n *   between samples in different successive batches.\n *\n *   To enable statefulness:\n *     - specify `stateful: true` in the layer constructor.\n *     - specify a fixed batch size for your model, by passing\n *       if sequential model:\n *         `batchInputShape=[...]` to the first layer in your model.\n *       else for functional model with 1 or more Input layers:\n *         `batchShape=[...]` to all the first layers in your model.\n *       This is the expected shape of your inputs *including the batch size*.\n *       It should be a tuple of integers, e.g. `(32, 10, 100)`.\n *     - specify `shuffle=False` when calling fit().\n *\n *   To reset the states of your model, call `.resetStates()` on either\n *   a specific layer, or on your entire model.\n *\n * Note on specifying the initial state of RNNs\n *   You can specify the initial state of RNN layers symbolically by\n *   calling them with the option `initialState`. The value of\n *   `initialState` should be a tensor or list of tensors representing\n *   the initial state of the RNN layer.\n *\n *   You can specify the initial state of RNN layers numerically by\n *   calling `resetStates` with the keyword argument `states`. The value of\n *   `states` should be a numpy array or list of numpy arrays representing\n *   the initial state of the RNN layer.\n *\n * Note on passing external constants to RNNs\n *   You can pass \"external\" constants to the cell using the `constants`\n *   keyword argument of `RNN.call` method. This requires that the `cell.call`\n *   method accepts the same keyword argument `constants`. Such constants\n *   can be used to condition the cell transformation on additional static\n *   inputs (not changing over time), a.k.a. an attention mechanism.\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nexport function rnn(args: RNNLayerArgs) {\n  return new RNN(args);\n}\n\n/**\n * Wrapper allowing a stack of RNN cells to behave as a single cell.\n *\n * Used to implement efficient stacked RNNs.\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nexport function stackedRNNCells(args: StackedRNNCellsArgs){\n  return new StackedRNNCells(args);\n}\n\n// Wrapper Layers.\n\n/** @doc {heading: 'Layers', subheading: 'Wrapper', namespace: 'layers'} */\nexport function bidirectional(args: BidirectionalLayerArgs) {\n  return new Bidirectional(args);\n}\n\n/**\n * This wrapper applies a layer to every temporal slice of an input.\n *\n * The input should be at least 3D,  and the dimension of the index `1` will be\n * considered to be the temporal dimension.\n *\n * Consider a batch of 32 samples, where each sample is a sequence of 10 vectors\n * of 16 dimensions. The batch input shape of the layer is then `[32,  10,\n * 16]`, and the `inputShape`, not including the sample dimension, is\n * `[10, 16]`.\n *\n * You can then use `TimeDistributed` to apply a `Dense` layer to each of the 10\n * timesteps, independently:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.timeDistributed({\n *   layer: tf.layers.dense({units: 8}),\n *   inputShape: [10, 16],\n * }));\n *\n * // Now model.outputShape = [null, 10, 8].\n * // The output will then have shape `[32, 10, 8]`.\n *\n * // In subsequent layers, there is no need for `inputShape`:\n * model.add(tf.layers.timeDistributed({layer: tf.layers.dense({units: 32})}));\n * console.log(JSON.stringify(model.outputs[0].shape));\n * // Now model.outputShape = [null, 10, 32].\n * ```\n *\n * The output will then have shape `[32, 10, 32]`.\n *\n * `TimeDistributed` can be used with arbitrary layers, not just `Dense`, for\n * instance a `Conv2D` layer.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.timeDistributed({\n *   layer: tf.layers.conv2d({filters: 64, kernelSize: [3, 3]}),\n *   inputShape: [10, 299, 299, 3],\n * }));\n * console.log(JSON.stringify(model.outputs[0].shape));\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Wrapper', namespace: 'layers'}\n */\nexport function timeDistributed(args: WrapperLayerArgs) {\n  return new TimeDistributed(args);\n}\n\n// Aliases for pooling.\nexport const globalMaxPool1d = globalMaxPooling1d;\nexport const globalMaxPool2d = globalMaxPooling2d;\nexport const maxPool1d = maxPooling1d;\nexport const maxPool2d = maxPooling2d;\n\nexport {Layer, RNN, RNNCell, input /* alias for tf.input */};\n\n/**\n * Apply additive zero-centered Gaussian noise.\n *\n * As it is a regularization layer, it is only active at training time.\n *\n * This is useful to mitigate overfitting\n * (you could see it as a form of random data augmentation).\n * Gaussian Noise (GS) is a natural choice as corruption process\n * for real valued inputs.\n *\n * # Arguments\n * stddev: float, standard deviation of the noise distribution.\n *\n * # Input shape\n * Arbitrary. Use the keyword argument `input_shape`\n * (tuple of integers, does not include the samples axis)\n * when using this layer as the first layer in a model.\n *\n * # Output shape\n * Same shape as input.\n *\n * @doc {heading: 'Layers', subheading: 'Noise', namespace: 'layers'}\n */\nexport function gaussianNoise(args: GaussianNoiseArgs) {\n  return new GaussianNoise(args);\n}\n\n/**\n * Apply multiplicative 1-centered Gaussian noise.\n *\n * As it is a regularization layer, it is only active at training time.\n *\n * Arguments:\n *   - `rate`: float, drop probability (as with `Dropout`).\n *     The multiplicative noise will have\n *     standard deviation `sqrt(rate / (1 - rate))`.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape`\n *   (tuple of integers, does not include the samples axis)\n *   when using this layer as the first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * References:\n *   - [Dropout: A Simple Way to Prevent Neural Networks from Overfitting](\n *      http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf)\n *\n * @doc {heading: 'Layers', subheading: 'Noise', namespace: 'layers'}\n */\nexport function gaussianDropout(args: GaussianDropoutArgs) {\n  return new GaussianDropout(args);\n}\n\n/**\n * Applies Alpha Dropout to the input.\n *\n * As it is a regularization layer, it is only active at training time.\n *\n * Alpha Dropout is a `Dropout` that keeps mean and variance of inputs\n * to their original values, in order to ensure the self-normalizing property\n * even after this dropout.\n * Alpha Dropout fits well to Scaled Exponential Linear Units\n * by randomly setting activations to the negative saturation value.\n *\n * Arguments:\n *   - `rate`: float, drop probability (as with `Dropout`).\n *     The multiplicative noise will have\n *     standard deviation `sqrt(rate / (1 - rate))`.\n *   - `noise_shape`: A 1-D `Tensor` of type `int32`, representing the\n *     shape for randomly generated keep/drop flags.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape`\n *   (tuple of integers, does not include the samples axis)\n *   when using this layer as the first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * References:\n *   - [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)\n *\n * @doc {heading: 'Layers', subheading: 'Noise', namespace: 'layers'}\n */\nexport function alphaDropout(args: AlphaDropoutArgs) {\n  return new AlphaDropout(args);\n}\n\n/**\n * Masks a sequence by using a mask value to skip timesteps.\n *\n * If all features for a given sample timestep are equal to `mask_value`,\n * then the sample timestep will be masked (skipped) in all downstream layers\n * (as long as they support masking).\n *\n * If any downstream layer does not support masking yet receives such\n * an input mask, an exception will be raised.\n *\n * Arguments:\n *   - `maskValue`: Either None or mask value to skip.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape`\n *   (tuple of integers, does not include the samples axis)\n *   when using this layer as the first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * @doc {heading: 'Layers', subheading: 'Mask', namespace: 'layers'}\n */\nexport function masking(args?: MaskingArgs) {\n  return new Masking(args);\n}\n\n/**\n * A preprocessing layer which rescales input values to a new range.\n *\n * This layer rescales every value of an input (often an image) by multiplying\n * by `scale` and adding `offset`.\n *\n * For instance:\n * 1. To rescale an input in the ``[0, 255]`` range\n * to be in the `[0, 1]` range, you would pass `scale=1/255`.\n * 2. To rescale an input in the ``[0, 255]`` range to be in the `[-1, 1]`\n * range, you would pass `scale=1./127.5, offset=-1`.\n * The rescaling is applied both during training and inference. Inputs can be\n * of integer or floating point dtype, and by default the layer will output\n * floats.\n *\n * Arguments:\n *   - `scale`: Float, the scale to apply to the inputs.\n *   - `offset`: Float, the offset to apply to the inputs.\n *\n * Input shape:\n *   Arbitrary.\n *\n * Output shape:\n *   Same as input.\n *\n * @doc {heading: 'Layers', subheading: 'Rescaling', namespace: 'layers'}\n */\nexport function rescaling(args?: RescalingArgs) {\n  return new Rescaling(args);\n}\n"},"lineCount":null}},"error":null,"hash":"77fc8ff61fe04249036867cfeb724125","cacheData":{"env":{}}}